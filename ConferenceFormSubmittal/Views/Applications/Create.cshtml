@model ConferenceFormSubmittal.Models.Application

@{
    ViewBag.Title = "Create";
    ViewBag.ConferenceID = Request.QueryString["Conference"];
}

<!--HEADING-->
<div class="row pt-3">
    <div class="col-12">
        <div class="card card-header bg-NCDSB-Grey">
            <h3 class="text-center font-weight-bold">Create Application</h3>
        </div>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row mt-3">

        <div class="col-3">
            <div class="card card-body bg-NCDSB-Grey">
                <div class="col-12">
                    <input type="button" value="Save As Draft" class="btn btn-primary btn-block mb-3" />
                    <input type="submit" value="Submit" class="btn btn-primary btn-block mb-3" />

                    @Html.ActionLink("Back to List", "Index", "Conferences", null, new { @class = "btn btn-primary btn-block mb-3" })
                </div>
            </div>
        </div> <!--col-->


        <div class="col-9">
            <div class="row mb-3">
                <div class="col-12">
                    <div class="card card-body bg-NCDSB-Grey">
                        <div class="row">
                            <div class="col-6">
                                @Html.LabelFor(model => model.ConferenceID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @ViewBag.Conference.Name

                                @Html.LabelFor(model => model.Conference.StartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @ViewBag.Conference.StartDate

                                @Html.LabelFor(model => model.Conference.EndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @ViewBag.Conference.EndDate
                            </div>

                            <div class="col-6">
                                @Html.LabelFor(model => model.Conference.Location, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @ViewBag.Conference.Location

                                @Html.LabelFor(model => model.Conference.RegistrationCost, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @ViewBag.Conference.RegistrationCost
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="card card-body bg-NCDSB-Grey">
                        <div class="row">
                            <div class="col-12">
                                @Html.LabelFor(model => model.Rationale, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.Rationale, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Rationale, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-6">
                                @Html.LabelFor(model => model.AttendStartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.AttendStartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AttendStartDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.AttendEndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.AttendEndDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AttendEndDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.PaymentTypeID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DropDownList("PaymentTypeID", null, "Select a Payment Type...", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PaymentTypeID, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-6">
                                @Html.LabelFor(model => model.DepartureDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.DepartureDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DepartureDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.ReturnDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.ReturnDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ReturnDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.BudgetCode, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.BudgetCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.BudgetCode, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-12">
                                @Html.LabelFor(model => model.ReplStaffReq, htmlAttributes: new { @class = "control-label font-weight-bold" })
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.ReplStaffReq)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Ajax.BeginForm("AddExpense", new AjaxOptions()
{
    HttpMethod = "Post",
    InsertionMode = InsertionMode.Replace
}))
{
    <div id="form-content">
        @Html.Partial("ApplicationExpensePartial", Model)
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $("#txtEstimatedCost").keydown(function () {
            $("#lblInvalidCost").addClass("d-none");
        });
        $("#ddlExpenseType").change(function () {
            $("#lblInvalidType").addClass("d-none");
        });

        function validExpense(typeID, cost)
        {
            $("#lblInvalidCost").addClass("d-none");
            $("#lblInvalidType").addClass("d-none");

            var result = true;

            if (typeID == "")
            {
                result = false;
                $("#lblInvalidType").removeClass("d-none");
            }

            if (!/^\d+(\.\d{0,2})?$/.test(cost))
            {
                result = false
                $("#lblInvalidCost").removeClass("d-none");
            }

            return result;
        }

        // adds the expense to the table if valid
        function addExpense() {

            // get values
            var $ddlType = $("#ddlExpenseType"),
                $txtCost = $("#txtEstimatedCost"),
                $txtRationale = $("#txtRationale"),
                type = $ddlType.find(":selected").text(),
                typeID = $ddlType.val(),
                cost = $txtCost.val(),
                rationale = $txtRationale.val();

            if (validExpense(typeID, cost))
            {
                // add the expense to the table
                $("#trAddExpense").before(
                    "<tr class='trExpense' data-expenseType='" + typeID + "'>" +
                    "<td class='expenseType'>" + type + "</td>" +
                    "<td class='estimatedCost'>$" + parseFloat(cost).toFixed(2) + "</td>" +
                    "<td class='rationale'>" + rationale + "</td>" +
                    "<td><a onclick='removeExpense($(this))' class='removeExpense btn btn-danger'><i class='fa fa-minus'></i></a></td>" +
                    "</tr>");
                // clear the input fields
                $ddlType.prop("selectedIndex", 0);
                $txtCost.val("");
                $txtRationale.val("");
            }
        }

        // removes an expense from the table
        function removeExpense($row) {
            $row.closest(".trExpense").remove();
        }
    </script>
}
