@model ConferenceFormSubmittal.Models.Application
@using ConferenceFormSubmittal.Utilities;

@{
    ViewBag.Title = "New Application";
    ViewBag.ConferenceID = Request.QueryString["Conference"];
}

<!--HEADING-->
<div class="row pt-3">
    <div class="col-12">
        <div class="card card-header bg-NCDSB-Grey">
            <h3 class="text-center font-weight-bold">New Application</h3>
        </div>
    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmCreateApplication" }))
{
    @Html.AntiForgeryToken()


    //-----------------------------------------------------------------buttons bar --------------------------------------------------------------------
    <div class="row pt-3">
        <div class="col-12 ">
            <div class="card bg-NCDSB-Grey">
                <div class="card-body">
                    <div class="col-12 d-flex justify-content-between">

                        <a href='@Url.Action("Index", "Conferences")' class="btn btn-primary">
                            @Helper.GetIcon(Icons.Back)
                            Go Back
                        </a>

                        <button class="btn btn-info" type="button">
                            @Helper.GetIcon(Icons.Draft)
                            Save As Draft
                        </button>

                        <button class="btn btn-success" type="button" id="btnSubmit">
                            @Helper.GetIcon(Icons.Save)
                            Submit
                        </button>

                    </div>
                </div>
            </div>
        </div>

    </div>





    <div class="row mt-3">


        <div class="col-12 ">


            @*-------------------------------------------------- conference details ---------------------------------------------------------*@
            <div class="row mb-3">
                <div class="col-12">
                    <div class="card  bg-NCDSB-Grey">
                        <div class="card-header">
                            <h4>Conference Details</h4> @*Each panel needs a header of some kind*@
                        </div>
                        <div class="card-body">

                            <div class="row">
                                <div class="col-6">
                                    @Html.LabelFor(model => model.ConferenceID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @ViewBag.Conference.Name
                                    @Html.Hidden("ConferenceID", new { @value = ViewBag.ConferenceID })

                                    @Html.LabelFor(model => model.Conference.StartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @ViewBag.Conference.StartDate.ToShortDateString()

                                    @Html.LabelFor(model => model.Conference.EndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @ViewBag.Conference.EndDate.ToShortDateString()
                                </div>

                                <div class="col-6">
                                    @Html.LabelFor(model => model.Conference.Location, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @ViewBag.Conference.Location

                                    @Html.LabelFor(model => model.Conference.RegistrationCost, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @ViewBag.Conference.RegistrationCost.ToString("C")
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>


            @*---------------------------------------------------------------Application Details ----------------------------------------------------------*@
            <div class="row">
                <div class="col-12">
                    <div class="card bg-NCDSB-Grey">
                        <div class="card-header">

                            <h4 class="d-block mt-2">Application Details</h4> @*Each panel needs a header of some kind*@
                        </div>
                        <div class="card-body ">

                            <div class="row">

                                <div class="col-12">
                                    @Html.LabelFor(model => model.Rationale, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @Html.EditorFor(model => model.Rationale, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight" } })
                                    @Html.ValidationMessageFor(model => model.Rationale, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-6">
                                    @Html.LabelFor(model => model.AttendStartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @Html.EditorFor(model => model.AttendStartDate, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight" } })
                                    @Html.ValidationMessageFor(model => model.AttendStartDate, "", new { @class = "text-danger" })

                                    @Html.LabelFor(model => model.AttendEndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @Html.EditorFor(model => model.AttendEndDate, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight" } })
                                    @Html.ValidationMessageFor(model => model.AttendEndDate, "", new { @class = "text-danger" })

                                    @Html.LabelFor(model => model.PaymentTypeID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @Html.DropDownList("PaymentTypeID", null, "Select a Payment Type...", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PaymentTypeID, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-6">
                                    @Html.LabelFor(model => model.DepartureDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @Html.EditorFor(model => model.DepartureDate, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight" } })
                                    @Html.ValidationMessageFor(model => model.DepartureDate, "", new { @class = "text-danger" })

                                    @Html.LabelFor(model => model.ReturnDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @Html.EditorFor(model => model.ReturnDate, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight" } })
                                    @Html.ValidationMessageFor(model => model.ReturnDate, "", new { @class = "text-danger" })

                                    @Html.LabelFor(model => model.BudgetCode, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                    @Html.EditorFor(model => model.BudgetCode, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight" } })
                                    @Html.ValidationMessageFor(model => model.BudgetCode, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-12">
                                    @Html.LabelFor(model => model.ReplStaffReq, htmlAttributes: new { @class = "control-label font-weight-bold" })
                                    <div class="checkbox">
                                        @Html.EditorFor(model => model.ReplStaffReq)
                                    </div>
                                </div>
                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Ajax.BeginForm("AddExpense", new AjaxOptions()
{
    HttpMethod = "Post",
    InsertionMode = InsertionMode.Replace
}))
{
    <div id="form-content">
        @Html.Partial("ApplicationExpensePartial", Model)
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">

        function expense(type, typeID, cost, rationale) {
            var self = this;
            self.type = type;
            self.ExpenseTypeID = typeID
            self.EstimatedCost = cost;
            self.Rationale = rationale;
        }

        $(function () {
            function expenseVM() {
                var self = this;

                self.expenses = ko.observableArray([]);
                self.newTypeID = ko.observable();
                self.newCost = ko.observable();
                self.newRationale = ko.observable();

                self.addExpense = function () {
                    self.expenses.push(new expense($("#ddlExpenseType option:selected").text(), self.newTypeID(), parseFloat(self.newCost()).toFixed(2), self.newRationale()));
                    // clear input fields
                    self.newTypeID(0);
                    self.newCost("");
                    self.newRationale("");
                }

                self.removeExpense = function () {
                    self.expenses.remove(this);
                }
            }

            ko.applyBindings(new expenseVM());
        });
        //$("#txtEstimatedCost").keydown(function () {
        //    $("#lblInvalidCost").addClass("d-none");
        //});
        //$("#ddlExpenseType").change(function () {
        //    $("#lblInvalidType").addClass("d-none");
        //});

        //function validExpense(typeID, cost) {
        //    $("#lblInvalidCost").addClass("d-none");
        //    $("#lblInvalidType").addClass("d-none");

        //    var result = true;

        //    if (typeID == "") {
        //        result = false;
        //        $("#lblInvalidType").removeClass("d-none");
        //    }

        //    if (!/^\d+(\.\d{0,2})?$/.test(cost)) {
        //        result = false
        //        $("#lblInvalidCost").removeClass("d-none");
        //    }

        //    return result;
        //}

        //// adds the expense to the table if valid
        //function addExpense() {

        //    // get values
        //    var $ddlType = $("#ddlExpenseType"),
        //        $txtCost = $("#txtEstimatedCost"),
        //        $txtRationale = $("#txtRationale"),
        //        type = $ddlType.find(":selected").text(),
        //        typeID = $ddlType.val(),
        //        cost = $txtCost.val(),
        //        rationale = $txtRationale.val();

        //    if (validExpense(typeID, cost)) {
        //        // add the expense to the table
        //        $("#trAddExpense").before(
        //            "<tr class='trExpense'>" +
        //            "<td class='expenseType' data-id='" + typeID + "'>" + type + "</td>" +
        //            "<td>$<span class='estimatedCost'>" + parseFloat(cost).toFixed(2) + "</span></td>" +
        //            "<td class='rationale'>" + rationale + "</td>" +
        //            "<td><a onclick='removeExpense($(this))' class='removeExpense btn btn-danger'><i class='fa fa-minus'></i></a></td>" +
        //            "</tr>");
        //        // clear the input fields
        //        $ddlType.prop("selectedIndex", 0);
        //        $txtCost.val("");
        //        $txtRationale.val("");
        //    }
        //}

        //// removes an expense from the table
        //function removeExpense($row) {
        //    $row.closest(".trExpense").remove();
        //}

        //$("#btnSubmit").click(function () {
        //    var expenseBatch = [];

        //    $(".trExpense").each(function () {
        //        var row = $(this);

        //        var expense = {
        //            ExpenseTypeID: row.find(".expenseType").data("id"),
        //            EstimatedCost: row.find(".estimatedCost").html(),
        //            Rationale: row.children(".rationale").html()
        //        };

        //        expenseBatch.push(expense);
        //    });

        //    $.ajax({
        //        type: "POST",
        //        url: "/Applications/AddExpenses",
        //        data: JSON.stringify(expenseBatch),
        //        contentType: "application/json; charset=utf-8",
        //        dataType: "json",
        //        success: function (response) {
        //            alert(response + " expenses(s) added.");

        //            $("#frmCreateApplication").submit();
        //        }
        //    });
        //});
    </script>
}
