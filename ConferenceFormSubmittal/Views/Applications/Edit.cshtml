@model ConferenceFormSubmittal.Models.Application
@using ConferenceFormSubmittal.Utilities;

@{
    ViewBag.Title = "Edit Application";
}

<!--HEADING-->
<div class="row pt-3">
    <div class="col-12">
        <div class="card card-header bg-NCDSB-Grey">
            <h3 class="text-center font-weight-bold">Edit Application</h3>
        </div>
    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmEditApplication" }))
{
    @Html.AntiForgeryToken()

    @*//------------------------------------------------ Header buttons ---------------------------------*@
    <div class="row mt-3">
        <div class="col-12">

            <div class="card bg-NCDSB-Grey">
                <div class="card-body">
                    <div class="row ">
                        <div class="col-12 d-flex justify-content-between">
                            <a href='@Url.Action("Index", "Applications")' class="btn btn-primary">
                                @Helper.GetIcon(Icons.Back)
                                Go Back
                            </a>

                            <button type="button" class="btn btn-success btnSave">
                                @Helper.GetIcon(Icons.Save)
                                Save Changes
                            </button>

                            <button type="button" class="btn btn-primary btnSubmit d-none">
                                @Helper.GetIcon(Icons.Submitted)
                                Submit Application
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>


    //-----------------------------------------Conference Details ------------------------------------
    <div class="row pt-3">
        <div class="col-12">
            <div class="card bg-NCDSB-Grey">
                <div class="card-header ">
                    <h4>Conference Details</h4>
                </div>

                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            @Html.HiddenFor(model => model.ConferenceID)

                            @Html.LabelFor(model => model.ConferenceID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.DisplayFor(model => model.Conference.Name)
                        </div>

                        <div class="col-6">
                            @Html.LabelFor(model => model.Conference.Location, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.DisplayFor(model => model.Conference.Location)

                        </div>
                    </div>
                    <div class="row pt-2">
                        <div class="col-6">
                            @Html.LabelFor(model => model.Conference.StartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.DisplayFor(model => model.Conference.StartDate)
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.Conference.EndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.DisplayFor(model => model.Conference.EndDate)
                        </div>
                    </div>
                    <div class="row pt-2">
                        <div class="col-6">
                            @Html.LabelFor(model => model.Conference.RegistrationCost, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.DisplayFor(model => model.Conference.RegistrationCost)
                        </div>
                        <div class="col-6">

                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    //--------------------------------------------------- Application Details -----------------------------
    <div class="row pt-3">
        <div class="col-12">
            <div class="card bg-NCDSB-Grey">
                <div class="card-header">
                    <h4 class="d-block mt-2">Application Details</h4>
                    @Html.HiddenFor(Model => Model.ID, htmlAttributes: new { @id = "applicationID" })
                </div>
                <div class="card-body">
                    <div class="row">

                        <div class="col-6">
                            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Helper.GetIcon(Model.Status.Description, 2)
                            <label id="lblStatus">@Model.Status.Description</label>
                            @Html.HiddenFor(model => model.StatusID)
                            @Html.HiddenFor(model => model.DateSubmitted)
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.Feedback, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.DisplayFor(model => model.Feedback)
                        </div>
                    </div>

                    <div class="row pt-2">
                        <div class="col-6">
                            @Html.LabelFor(model => model.AttendStartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.EditorFor(model => model.AttendStartDate, new { htmlAttributes = new { @class = "form-control applicationDate" } })
                            <label id="lblAttendStartError" class="text-danger d-none"></label>
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.DepartureDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.EditorFor(model => model.DepartureDate, new { htmlAttributes = new { @class = "form-control applicationDate" } })
                            <label id="lblDepartureDateError" class="text-danger d-none"></label>
                        </div>
                    </div>

                    <div class="row pt-2">
                        <div class="col-6">
                            @Html.LabelFor(model => model.AttendEndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.EditorFor(model => model.AttendEndDate, new { htmlAttributes = new { @class = "form-control applicationDate" } })
                            <label id="lblAttendEndError" class="text-danger d-none"></label>
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.ReturnDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.EditorFor(model => model.ReturnDate, new { htmlAttributes = new { @class = "form-control applicationDate" } })
                            <label id="lblReturnDateError" class="text-danger d-none"></label>
                        </div>
                    </div>

                    <div class="row pt-2">
                        <div class="col-6">
                            @Html.LabelFor(model => model.PaymentTypeID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.DropDownList("PaymentTypeID", null, "Select...", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PaymentTypeID, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.BudgetCode, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.EditorFor(model => model.BudgetCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BudgetCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row pt-2">
                        <div class="col-6">
                            @Html.LabelFor(model => model.Rationale, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @Html.EditorFor(model => model.Rationale, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Rationale, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.ReplStaffReq, htmlAttributes: new { @class = "control-label font-weight-bold" })
                            <div class="checkbox">
                                @Html.EditorFor(model => model.ReplStaffReq)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @*//------------------------------------------------ Footer buttons ---------------------------------*@
    <div class="row mt-3">
        <div class="col-12">

            <div class="card bg-NCDSB-Grey">
                <div class="card-body">
                    <div class="row ">
                        <div class="col-12 d-flex justify-content-between">
                            <a href='@Url.Action("Index", "Applications")' class="btn btn-primary">
                                @Helper.GetIcon(Icons.Back)
                                Go Back
                            </a>

                            <button type="button" class="btn btn-success btnSave">
                                @Helper.GetIcon(Icons.Save)
                                Save Changes
                            </button>

                            <button type="button" class="btn btn-primary btnSubmit d-none">
                                @Helper.GetIcon(Icons.Submitted)
                                Submit Application
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    //---------------------------------------------------Expenses -=------------------------------------------------------------
    <div class="row pt-3">
        <div class="col-12">
            <div class="card bg-NCDSB-Grey mt-3">
                <div class="card-header">
                    <h4>Expenses</h4>
                </div>
                <div class="card-body">
                    <div class="col-12">


                        <table id="tblExpenses" class="table">
                            <tbody>
                                <tr>
                                    <th>
                                        @Html.LabelFor(model => model.Expenses.SingleOrDefault().ExpenseTypeID, htmlAttributes: new { @class = "control-label font-bold" })
                                    </th>
                                    <th>
                                        @Html.LabelFor(model => model.Expenses.SingleOrDefault().EstimatedCost, htmlAttributes: new { @class = "control-label font-bold" })
                                    </th>
                                    <th>
                                        @Html.LabelFor(model => model.Expenses.SingleOrDefault().ActualCost, htmlAttributes: new { @class = "control-label font-bold" })
                                    </th>
                                    <th>
                                        @Html.LabelFor(model => model.Expenses.SingleOrDefault().Rationale, htmlAttributes: new { @class = "control-label font-bold" })
                                    </th>
                                    <th data-bind="visible: $root.applicationIsApproved">
                                        @Html.LabelFor(model => model.Expenses.SingleOrDefault().Files, htmlAttributes: new { @class = "control-label font-bold" })
                                    </th>
                                    <th></th>
                                </tr>

                            <tbody data-bind="foreach: expenses">
                                <tr data-bind="attr:{ 'id': 'trExpense' + ID }">
                                    <td>
                                        <label data-bind="text: type, visible: !editMode()"></label>
                                        @Html.DropDownList("ExpenseTypeID", null, htmlAttributes: new { @class = "form-control ddlExpenseType", data_bind = "value: ExpenseTypeID, visible: editMode" })
                                    </td>
                                    <td>
                                        <label data-bind="text: formattedEstCost, visible: $root.applicationIsApproved || !editMode()"></label>
                                        <input type="text" class="form-control" data-bind="value: EstimatedCost, visible: !$root.applicationIsApproved && editMode(), css:{ valid: EstimatedIsValid, invalid: !EstimatedIsValid() }, event:{keyup: validate }, valueUpdate: 'afterkeydown'" />
                                        <label class="text-danger" data-bind="visible: !$root.applicationIsApproved && editMode() && !EstimatedIsValid()">Invalid currency value.</label>
                                    </td>
                                    <td>
                                        <label data-bind="text: formattedActCost, visible: !$root.applicationIsApproved || !editMode()"></label>
                                        <input type="text" class="form-control" data-bind="value: ActualCost, visible: $root.applicationIsApproved && editMode(), css:{ valid: ActualIsValid, invalid: !ActualIsValid() }, event:{keyup: validate }, valueUpdate: 'afterkeydown'" />
                                        <label class="text-danger" data-bind="visible: $root.applicationIsApproved && editMode() && !ActualIsValid()">Invalid currency value.</label>
                                    </td>
                                    <td>
                                        <label data-bind="text: Rationale, visible: !editMode()"></label>
                                        <input type="text" class="form-control valid" data-bind="value: Rationale, visible: editMode" />
                                    </td>
                                    <td data-bind="visible: $root.applicationIsApproved">
                                        <div class="form-group" data-bind="visible: !editMode()">
                                            <label data-bind="visible: Files().length < 1">None</label>
                                            <div data-bind="foreach: Files()">
                                                <i class="fa fa-download prefix"></i>
                                                <u><a data-bind="text: FileName, attr:{ href: '/Expenses/DownloadFile/' + ID }"></a></u>
                                                <br />
                                            </div>
                                        </div>

                                        <div class="form-group" data-bind="visible: editMode()">
                                            <div class="col-md-10">
                                                <input type="file" class="form-control" multiple="multiple" /><br />
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <a data-bind="visible: !$root.editMode(), click: $root.edit" class="badge badge-primary text-white">
                                            @Helper.GetIcon(Icons.Edit, 3, "white")
                                            <br />
                                            Edit
                                        </a>
                                        <a data-bind="visible: editMode, click: $root.save" class="badge badge-success text-white">
                                            @Helper.GetIcon(Icons.Save, 3, "white")
                                            <br />
                                            Save
                                        </a>
                                        <a data-bind="visible: editMode, click: $root.cancel" class="badge badge-danger text-white">
                                            @Helper.GetIcon(Icons.Cancel, 3, "white")
                                            <br />
                                            Cancel
                                        </a>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="card-header">
                    <h5>Add Expenses...</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-10">
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().ExpenseTypeID, htmlAttributes: new { @class = "control-label font-bold" })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().EstimatedCost, htmlAttributes: new { @class = "control-label font-bold" })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().ActualCost, htmlAttributes: new { @class = "control-label font-bold" })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().Rationale, htmlAttributes: new { @class = "control-label font-bold" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2"></div>
                    </div>
                    <div id="newExpense" class="row">
                        <div class="col-md-10">
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.DropDownList("ExpenseTypeID", null, "Select Expense Type...", htmlAttributes: new { @class = "form-control", @id = "ddlExpenseType", data_bind = "value: newTypeID" })
                                    <label id="lblInvalidType" class="text-danger d-none">You must select an expense type.</label>
                                </div>
                                <div class="col-md-3">
                                    <input type="text" id="txtEstimatedCost" class="form-control" data-bind="value: newEstCost" />
                                    <label id="lblInvalidEstCost" class="text-danger d-none">You must provide a valid cost estimate.</label>
                                </div>
                                <div class="col-md-3">
                                    <input type="text" id="txtActualCost" class="form-control" data-bind="value: newActCost" />
                                    <label id="lblInvalidActCost" class="text-danger d-none">Invalid currency value.</label>
                                </div>
                                <div class="col-md-3">
                                    <input type="text" id="txtRationale" class="form-control" data-bind="value: newRationale" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-1">
                            <a class="btn btn-success mt-3" data-bind="click: addExpense">
                                @Helper.GetIcon(Icons.Plus, 1, "white")
                            </a>
                        </div>
                        <div class="col-md-1">
                            <a class="btn btn-danger mt-3 d-none" id="btnClearExpenseInputs">
                                @Helper.GetIcon(Icons.Minus, 1, "white")
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @*-------------------------------------------Mileages---------------------------------------------------------*@
    <div class="row">
        <div class="col-12">
            <div class="card bg-NCDSB-Grey mt-3">
                <div class="card-header">
                    <h4>Mileages</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            @if (Model.Mileages.Count > 0)
                            {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>
                                            @Html.LabelFor(model => model.Mileages.SingleOrDefault().TravelDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                        </th>
                                        <th>
                                            @Html.LabelFor(model => model.Mileages.SingleOrDefault().StartAddress, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                        </th>
                                        <th>
                                            @Html.LabelFor(model => model.Mileages.SingleOrDefault().EndAddress, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                        </th>
                                        <th>
                                            @Html.LabelFor(model => model.Mileages.SingleOrDefault().Kilometres, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                        </th>
                                        <th>
                                            @Html.LabelFor(model => model.Mileages.SingleOrDefault().Status, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Mileages)
                                    {
                                        <tr>
                                            <td>
                                                @item.TravelDate.ToShortDateString()
                                            </td>
                                            <td>
                                                @item.StartAddress
                                            </td>
                                            <td>
                                                @item.EndAddress
                                            </td>
                                            <td>
                                                @item.Kilometres km
                                            </td>
                                            <td>
                                                @Helper.GetIcon(item.Status.Description)
                                                @item.Status.Description
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            }
                            else
                            {
                            <p>None</p>
                            }
                            @if (Model.Status.Description == "Approved")
                            {
                                <a class="btn btn-success mt-3" href="/Mileages/Create?ApplicationID=@Model.ID">
                                @Helper.GetIcon(Icons.Plus, 1, "white")
                                Add Mileage
                            </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">
        function datesAreValid(submitting) {
            var departureDate = $("#DepartureDate").val(),
                attendStart = $("#AttendStartDate").val(),
                attendEnd = $("#AttendEndDate").val(),
                returnDate = $("#ReturnDate").val(),
                result = true;

            // start of attendance can't be before departure date
            if (departureDate.length && attendStart.length && departureDate > attendStart) {
                $("#lblAttendStartError").html("Start of Attendance cannot be before Departure Date.").removeClass("d-none");
                result = false;
            }
            else if (attendStart.length)
                $("#lblAttendStartError").addClass("d-none");

            // end of attendance can't be before start of attendance
            if (attendStart.length && attendEnd.length && attendStart > attendEnd) {
                $("#lblAttendEndError").html("End of Attendance cannot be before Start of Attendance.").removeClass("d-none");
                result = false;
            }
            else if (attendEnd.length)
                $("#lblAttendEndError").addClass("d-none");

            // return date can't be before end of attendance
            if (attendEnd.length && returnDate.length && attendEnd > returnDate) {
                $("#lblReturnDateError").html("Return Date cannot be before End of Attendance.").removeClass("d-none");
                result = false;
            }
            else if (returnDate.length)
                $("#lblReturnDateError").addClass("d-none");

            // if submitting, dates are required
            if (submitting) {
                if (departureDate == "") {
                    $("#lblDepartureDateError").html("Departure Date is required.").removeClass("d-none");
                    result = false;
                }
                if (attendStart == "") {
                    $("#lblAttendStartError").html("Start of Attendance is required.").removeClass("d-none");
                    result = false;
                }
                if (attendEnd == "") {
                    $("#lblAttendEndError").html("End of Attendance is required.").removeClass("d-none");
                    result = false;
                }
                if (returnDate == "") {
                    $("#lblReturnDateError").html("Return Date is required.").removeClass("d-none");
                    result = false;
                }
            }

            return result;
        }

        $(".applicationDate").change(function () {
            if ($(this).val().length)
                $(this).siblings("label.text-danger").addClass("d-none");

            datesAreValid();
        });

        function File(data) {
            var self = this;
            self.ID = data.ID;
            self.FileName = data.fileName;
        }

        function Expense(data) {
            var self = this,
                currentData; // saved in case the user cancels edits

            if (data) {
                currentData = data;

                self.ID = data.ID;
                self.type = ko.observable(data.type); // Expense type description
                self.ExpenseTypeID = ko.observable(data.ExpenseTypeID);
                self.EstimatedCost = ko.observable(data.EstimatedCost);
                self.ActualCost = ko.observable(data.ActualCost);
                self.Rationale = ko.observable(data.Rationale);
            }

            self.ApplicationID = $("#applicationID").val();
            self.Files = ko.observableArray();

            self.formattedEstCost = ko.computed(function () {
                return (isNaN(self.EstimatedCost()) || self.EstimatedCost() == null) ? "N/A" : "$" + parseFloat(self.EstimatedCost()).toFixed(2);
            });

            self.formattedActCost = ko.computed(function () {
                return (isNaN(self.ActualCost()) || self.ActualCost() == null) ? "TBD" : "$" + parseFloat(self.ActualCost()).toFixed(2);
            });

            self.editMode = ko.observable(false);
            self.EstimatedIsValid = ko.observable(true);
            self.ActualIsValid = ko.observable(true);

            self.validate = function () {
                var approved = $("#lblStatus").html() == "Approved";

                self.EstimatedIsValid(approved || /^\d+(\.\d{0,2})?$/.test(self.EstimatedCost()));
                self.ActualIsValid(!approved || self.ActualCost() == "" || self.ActualCost() == null || /^\d+(\.\d{0,2})?$/.test(self.ActualCost()));
            }

            self.isValid = function () {
                self.validate();
                return (self.EstimatedIsValid() && self.ActualIsValid());
            }

            self.uploadFiles = function () {
                var $row = $("#trExpense" + self.ID),
                    $fileInput = $row.find("input[type='file']"),
                    formdata = new FormData();

                if (($fileInput)[0].files.length) {
                    var fileName;
                    for (i = 0; i < ($fileInput)[0].files.length; i++) {
                        fileName = ($fileInput)[0].files[i].name;
                        formdata.append(fileName, ($fileInput)[0].files[i]);
                    }

                    var xhr = new XMLHttpRequest();
                    xhr.open("post", "/Expenses/UploadFiles/" + self.ID);
                    xhr.send(formdata);
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 4 && xhr.status == 200) {
                            ($fileInput)[0].value = "";

                            // add the new files to the observable array
                            // the substring removes the unwanted quotation marks from the response string
                            var newFiles = xhr.responseText.substring(1, xhr.responseText.length - 1).split(";"), f;
                            for (var i = 0; i < newFiles.length; i++) {
                                f = newFiles[i].split(",");
                                self.Files.push({ ID: f[0], FileName: f[1] });
                            }
                        }
                    }
                }
            }

            self.update = function (vm) {
                if (self.isValid()) {
                    $.ajax("/Expenses/AddOrUpdateExpense", {
                        type: "post",
                        contentType: "application/json",
                        data: ko.toJSON({ expense: self }),
                        success: function (response) {
                            if (response.split(":")[0] == "success") {
                                self.type($("#trExpense" + self.ID).find(".ddlExpenseType option:selected").text());

                                currentData = {
                                    type: self.type(),
                                    ExpenseTypeID: self.ExpenseTypeID(),
                                    EstimatedCost: self.EstimatedCost(),
                                    ActualCost: self.ActualCost(),
                                    Rationale: self.Rationale()
                                }
                                self.editMode(false);
                                vm.editMode(false);

                                self.uploadFiles();
                            }
                            else
                                alert(response);
                        }
                    });
                }
            }

            self.reset = function () {
                self.type(currentData.type);
                self.ExpenseTypeID(currentData.ExpenseTypeID);
                self.EstimatedCost(currentData.EstimatedCost);
                self.ActualCost(currentData.ActualCost);
                self.Rationale(currentData.Rationale);

                self.editMode(false);

                // clear file input
                ($("#trExpense" + self.ID).find("input[type='file']"))[0].value = "";
            }
        }

        function expenseIsValid() {
            // hide error messages
            $("#newExpense").find("label.text-danger").addClass("d-none");

            // get user input
            var typeID = $("#ddlExpenseType").val(),
                estCost = $("#txtEstimatedCost").val(),
                actCost = $("#txtActualCost").val();

            var approved = $("#lblStatus").html() == "Approved";

            // innocent until proven guilty
            var result = true;

            // Expense Type
            if (typeID == 0) {
                result = false;
                $("#lblInvalidType").removeClass("d-none");
            }

            var currencyPattern = /^\d+(\.\d{0,2})?$/;

            // Estimated Cost
            if (!approved && !currencyPattern.test(estCost)) {
                result = false;
                $("#lblInvalidEstCost").removeClass("d-none");
            }

            // Actual Cost
            if (approved && actCost != "" && !currencyPattern.test(actCost)) {
                result = false;
                $("#lblInvalidActCost").removeClass("d-none");
            }

            return result;
        }

        function ClearExpenseInputs() {
            $("#ddlExpenseType").val("");
            $("#newExpense").find("input").not(":disabled").val("");

            $("#btnClearExpenseInputs").addClass("d-none");
            $("#newExpense").find("label.text-danger").addClass("d-none");
        }

        function ExpenseVM() {
            var self = this;
            self.applicationIsApproved = $("#lblStatus").html() == "Approved";

            self.expenses = ko.observableArray([]);

            self.newExpense = ko.observable();
            self.newTypeID = ko.observable();
            self.newEstCost = ko.observable();
            self.newActCost = ko.observable();
            self.newRationale = ko.observable();

            self.editMode = ko.observable(false);
            self.edit = function (expense) {
                expense.editMode(true);
                self.editMode(true);
            }

            self.save = function (expense) {
                expense.update(self); // passing self in order to access ExpenseVM.editMode from Expense class
            }

            self.cancel = function (expense) {
                expense.reset();
                self.editMode(false);
            }

            self.addExpense = function () {
                if (expenseIsValid() && confirm("Are you sure?\n\nClick OK to add the expense.")) {
                    var newExpense = new Expense({
                        type: $("#ddlExpenseType option:selected").text(),
                        ExpenseTypeID: self.newTypeID(),
                        EstimatedCost: self.newEstCost(),
                        ActualCost: self.newActCost(),
                        Rationale: self.newRationale()
                    });

                    $.ajax("/Expenses/AddOrUpdateExpense", {
                        type: "post",
                        contentType: "application/json",
                        data: ko.toJSON({ expense: newExpense }),
                        success: function (response) {
                            if (response.split(":")[0] == "success")
                            {
                                ClearExpenseInputs();

                                self.loadExpenses();
                            }
                            else
                                alert(response);
                        }
                    });
                }
            }

            self.loadExpenses = function () {
                $.getJSON("/Expenses/LoadExpenses/", { applicationID: $("#applicationID").val() }, function (data) {
                    var mappedExpenses = $.map(data, function (item) { return new Expense(item) });
                    self.expenses(mappedExpenses);

                    // load documentation for each expense
                    ko.utils.arrayForEach(self.expenses(), function (expense) {
                        $.getJSON("/Expenses/LoadDocumentation/", { expenseID: expense.ID }, function (data) {
                            var mappedFiles = $.map(data, function (item) { return new File(item) });
                            expense.Files(mappedFiles);
                        });
                    });
                });
            }

            self.loadExpenses();
        }

        var vm = new ExpenseVM();
        ko.applyBindings(vm);

        function addingExpense() {
            var estCost = $("#txtEstimatedCost").val(),
                actCost = $("#txtActualCost").val();

            if ($("#ddlExpenseType").val() != "" || (estCost != "" && estCost != "N/A") || (actCost != "" && actCost != "TBD") || $("#txtRationale").val() != "") {
                $("#btnClearExpenseInputs").removeClass("d-none");
                return true;
            }
            $("#btnClearExpenseInputs").addClass("d-none");
            return false;
        }

        function okToSubmit(notDraft) {
            var result = true

            if (vm.editMode()) {
                result = false;
                alert("Please finish editing expenses before submitting.");
                $(window).scrollTop($("#tblExpenses").offset().top);
            }
            else if (addingExpense()) {
                result = false;
                alert("Please finish adding the new expense or cancel it before submitting.");
                $(window).scrollTop($("#tblExpenses").offset().top);
            }
            else if (!datesAreValid(notDraft)) {
                result = false;
                $(window).scrollTop($(".text-danger:not(.d-none)").first().closest(".card").offset().top);
            }

            return result;
        }

        $(function () {
            if ($("#lblStatus").html() == "Draft" || $("#lblStatus").html() == "Denied") {
                $(".btnSubmit").click(function () {
                    if (okToSubmit(true) && confirm("Are you sure?\n\nClick OK to submit the application.")) {
                        $("#DateSubmitted").val(""); // need to reset DateSubmitted
                        $("#StatusID").val(1); // change status to Submitted
                        $("#frmEditApplication").submit();
                    }
                }).removeClass("d-none");
            }

            if ($("#lblStatus").html() == "Approved") {
                $("#txtEstimatedCost").prop("disabled", true).val("N/A");
            }
            else {
                $("#txtActualCost").prop("disabled", true).val("TBD");
            }

            $(".btnSave").click(function () {
                var submitted = $("#StatusID").val() != 4;
                if (okToSubmit(submitted)) {
                    $("#frmEditApplication").submit();
                }

            });

            $("#ddlExpenseType").change(function () {
                addingExpense();
                $(this).siblings("label.text-danger").addClass("d-none");
            });
            $("#newExpense").find("input").keyup(function () {
                addingExpense();
                $(this).siblings("label.text-danger").addClass("d-none");
            }).change();

            $("#btnClearExpenseInputs").click(function () {
                ClearExpenseInputs();
            });
        });
    </script>
}