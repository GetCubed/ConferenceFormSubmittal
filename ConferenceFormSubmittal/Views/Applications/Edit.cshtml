@model ConferenceFormSubmittal.Models.Application
@using ConferenceFormSubmittal.Utilities;

@{
    ViewBag.Title = "Edit Application";
}

<!--HEADING-->
<div class="row pt-3">
    <div class="col-12">
        <div class="card card-header bg-NCDSB-Grey">
            <h3 class="text-center font-weight-bold">Edit Application</h3>
        </div>
    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmEditApplication" }))
{
    @Html.AntiForgeryToken()

    <div class="row mt-3">

        <div class="col-3">
            <div class="card card-body bg-NCDSB-Grey">
                <div class="col-12">
                    <input type="button" value="Save As Draft" class="btn btn-primary btn-block mb-3" />
                    <input id="btnSubmit" type="button" value="Save Changes" class="btn btn-primary btn-block mb-3" />

                    @Html.ActionLink("Back to List", "Index", "Conferences", null, new { @class = "btn btn-primary btn-block mb-3" })
                </div>
            </div>
        </div> <!--col-->


        <div class="col-9">
            <div class="row mb-3">
                <div class="col-12">
                    <div class="card card-body bg-NCDSB-Grey">
                        <div class="row">
                            <div class="col-12">
                                <h4>Conference Details</h4> @*Each panel needs a header of some kind*@
                            </div>
                            <br />
                            <br />
                            <div class="col-6">
                                @Html.LabelFor(model => model.ConferenceID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.Name)

                                @Html.LabelFor(model => model.Conference.StartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.StartDate)

                                @Html.LabelFor(model => model.Conference.EndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.EndDate)
                            </div>

                            <div class="col-6">
                                @Html.LabelFor(model => model.Conference.Location, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.Location)

                                @Html.LabelFor(model => model.Conference.RegistrationCost, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.RegistrationCost)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="card card-body bg-NCDSB-Grey">
                        <div class="row">
                            <div class="col-12">
                                <h4 class="d-block mt-2">Application Details</h4> @*Each panel needs a header of some kind*@
                            </div>
                            <br />
                            <br />
                            <div class="col-6">
                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.Raw(Helper.StatusIcon(Model.Status.Description))
                                @Html.DisplayFor(model => model.Status.Description)

                                @Html.LabelFor(model => model.AttendStartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.AttendStartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AttendStartDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.AttendEndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.AttendEndDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AttendEndDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.PaymentTypeID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DropDownList("PaymentTypeID", null, "Select a Payment Type...", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PaymentTypeID, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.BudgetCode, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.BudgetCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.BudgetCode, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-6">
                                @Html.LabelFor(model => model.Rationale, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.Rationale, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Rationale, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.Feedback, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Feedback)

                                @Html.LabelFor(model => model.DepartureDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.DepartureDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DepartureDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.ReturnDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.ReturnDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ReturnDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.ReplStaffReq, htmlAttributes: new { @class = "control-label font-weight-bold" })
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.ReplStaffReq)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card card-body bg-NCDSB-Grey mt-3">
                <div class="col-12">
                    <h4>Expenses</h4>

                    <table id="tblExpenses" class="table">
                        <tbody>
                            <tr>
                                <th>
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().ExpenseTypeID, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().EstimatedCost, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().ActualCost, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().Rationale, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th></th>
                            </tr>

                            
                            @foreach (var item in Model.Expenses)
                            {
                                @* cannot input actual cost until application is approved *@
                                var estimatedCostEditor = Html.EditorFor(e => item.EstimatedCost, new { htmlAttributes = new { @class = "form-control txtEstimatedCost" } });
                                var actualCostEditor = Html.EditorFor(e => item.ActualCost, new { htmlAttributes = new { @class = "form-control txtActualCost", @disabled = "disabled", @title = "Actual Cost cannot be entered before the application is approved." } });
                                
                                if (Model.Status.Description == "Approved")
                                {
                                    @* cannot edit estimated cost after application has been approved *@
                                    estimatedCostEditor = Html.EditorFor(e => item.EstimatedCost, new { htmlAttributes = new { @class = "form-control txtEstimatedCost", @disabled = "disabled", @title = "Estimated Cost cannot be changed after the application has been approved." } });
                                    actualCostEditor = Html.EditorFor(e => item.ActualCost, new { htmlAttributes = new { @class = "form-control txtActualCost" } });
                                }

                            <tr class="trExpense">
                                <td>
                                    @Html.DropDownList("ExpenseTypes" + item.ID.ToString(), null, htmlAttributes: new { @class = "form-control ddlExpenseType"})
                                </td>
                                <td>
                                    @estimatedCostEditor
                                </td>
                                <td>
                                    @actualCostEditor
                                </td>
                                <td>
                                    @Html.EditorFor(e => item.Rationale, new { htmlAttributes = new { @class = "form-control txtRationale" } })
                                    <input type="hidden" value="@item.ID" class="txtExpenseID" />
                                </td>
                            </tr>
                            }

                            @*Needs an "Add Expense" heading*@
                            <tr id="trAddExpense" class="rgba-grey-light">
                                <td>
                                    @Html.DropDownList("ExpenseTypeID", null, "Select Expense Type...", htmlAttributes: new { @class = "form-control", @id = "ddlExpenseType" })
                                    <label id="lblInvalidType" class="text-danger d-none">You must choose an expense type.</label>
                                </td>
                                <td>
                                    <input type="text" class="form-control" id="txtEstimatedCost" />
                                    <label id="lblInvalidCost" class="text-danger d-none">You must provide a valid cost estimate.</label>
                                </td>
                                <td>
                                    <input type="text" class="form-control" id="txtActualCost" />
                                    <label id="lblInvalidCost" class="text-danger d-none">You must provide a valid cost estimate.</label>
                                </td>
                                <td>
                                    <input type="text" class="form-control" id="txtRationale" />
                                </td>
                                <td>
                                    <a onclick="addExpense()" class="btn btn-success mt-3">
                                        <i class="fa fa-plus"></i>
                                    </a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $("#txtEstimatedCost").keydown(function () {
            $("#lblInvalidCost").addClass("d-none");
        });
        $("#ddlExpenseType").change(function () {
            $("#lblInvalidType").addClass("d-none");
        });

        function validExpense(typeID, cost) {
            $("#lblInvalidCost").addClass("d-none");
            $("#lblInvalidType").addClass("d-none");

            var result = true;

            if (typeID == "") {
                result = false;
                $("#lblInvalidType").removeClass("d-none");
            }

            if (!/^\d+(\.\d{0,2})?$/.test(cost)) {
                result = false
                $("#lblInvalidCost").removeClass("d-none");
            }

            return result;
        }

        // adds the expense to the table if valid
        function addExpense() {

            // get values
            var $ddlType = $("#ddlExpenseType"),
                $txtEstCost = $("#txtEstimatedCost"),
                $txtActCost = $("#txtActualCost"),
                $txtRationale = $("#txtRationale"),
                type = $ddlType.find(":selected").text(),
                typeID = $ddlType.val(),
                estCost = $txtEstCost.val(),
                actCost = $txtActCost.val(),
                rationale = $txtRationale.val();

            if (validExpense(typeID, cost)) {
                // add the expense to the table
                $("#trAddExpense").before(
                    "<tr class='trExpense'>" +
                    "<td class='expenseType' data-id='" + typeID + "'>" + type + "</td>" +
                    "<td>$<span class='estimatedCost'>" + parseFloat(estCost).toFixed(2) + "</span></td>" +
                    "<td>$<span class='actualCost'>" + parseFloat(actCost).toFixed(2) + "</span></td>" +
                    "<td class='rationale'>" + rationale + "</td>" +
                    "<td><a onclick='removeExpense($(this))' class='removeExpense btn btn-danger'><i class='fa fa-minus'></i></a></td>" +
                    "</tr>");
                // clear the input fields
                $ddlType.prop("selectedIndex", 0);
                $txtEstCost.val("");
                $txtActCost.val("");
                $txtRationale.val("");
            }
        }

        // removes an expense from the table
        function removeExpense($row) {
            $row.closest(".trExpense").remove();
        }

        $("#btnSubmit").click(function () {
            var expenseBatch = [];

            $(".trExpense").each(function () {
                var row = $(this);

                var expense = {
                    ID: row.find(".txtExpenseID").val(),
                    ExpenseTypeID: row.find(".ddlExpenseType").val(),
                    EstimatedCost: row.find(".txtEstimatedCost").val(),
                    ActualCost: row.find(".txtActualCost").val(),
                    Rationale: row.find(".txtRationale").val()
                };

                expenseBatch.push(expense);
            });

            $.ajax({
                type: "POST",
                url: "/Expenses/EditExpenses",
                data: JSON.stringify(expenseBatch),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    //$("#frmEditApplication").submit();
                    alert(response);
                }
            });
        });
    </script>
}