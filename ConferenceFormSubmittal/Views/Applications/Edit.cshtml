@model ConferenceFormSubmittal.Models.Application
@using ConferenceFormSubmittal.Utilities;

@{
    ViewBag.Title = "Edit Application";
}

<!--HEADING-->
<div class="row pt-3">
    <div class="col-12">
        <div class="card card-header bg-NCDSB-Grey">
            <h3 class="text-center font-weight-bold">Edit Application</h3>
        </div>
    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmEditApplication" }))
{
    @Html.AntiForgeryToken()

    <div class="row mt-3">

        <div class="col-3">
            <div class="card card-body bg-NCDSB-Grey">
                <div class="col-12">
                    <input type="button" value="Save As Draft" class="btn btn-primary btn-block mb-3" />
                    <input id="btnSubmit" type="button" value="Save Changes" class="btn btn-primary btn-block mb-3" />

                    @Html.ActionLink("Back to List", "Index", "Conferences", null, new { @class = "btn btn-primary btn-block mb-3" })
                </div>
            </div>
        </div> <!--col-->


        <div class="col-9">
            <div class="row mb-3">
                <div class="col-12">
                    <div class="card card-body bg-NCDSB-Grey">
                        <div class="row">
                            <div class="col-12">
                                <h4>Conference Details</h4> @*Each panel needs a header of some kind*@
                            </div>
                            <br />
                            <br />
                            <div class="col-6">
                                @Html.LabelFor(model => model.ConferenceID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.Name)

                                @Html.LabelFor(model => model.Conference.StartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.StartDate)

                                @Html.LabelFor(model => model.Conference.EndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.EndDate)
                            </div>

                            <div class="col-6">
                                @Html.LabelFor(model => model.Conference.Location, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.Location)

                                @Html.LabelFor(model => model.Conference.RegistrationCost, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Conference.RegistrationCost)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="card card-body bg-NCDSB-Grey">
                        <div class="row">
                            <div class="col-12">
                                <h4 class="d-block mt-2">Application Details</h4> @*Each panel needs a header of some kind*@
                                @Html.HiddenFor(Model => Model.ID, htmlAttributes: new { @id = "applicationID" })
                            </div>
                            <br />
                            <br />
                            <div class="col-6">
                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Helper.GetIcon(Model.Status.Description, 2)
                                <label id="lblStatus">@Model.Status.Description</label>

                                @Html.LabelFor(model => model.AttendStartDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.AttendStartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AttendStartDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.AttendEndDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.AttendEndDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AttendEndDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.PaymentTypeID, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DropDownList("PaymentTypeID", null, "Select a Payment Type...", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PaymentTypeID, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.BudgetCode, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.BudgetCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.BudgetCode, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-6">
                                @Html.LabelFor(model => model.Rationale, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.Rationale, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Rationale, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.Feedback, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.DisplayFor(model => model.Feedback)

                                @Html.LabelFor(model => model.DepartureDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.DepartureDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DepartureDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.ReturnDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                                @Html.EditorFor(model => model.ReturnDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ReturnDate, "", new { @class = "text-danger" })

                                @Html.LabelFor(model => model.ReplStaffReq, htmlAttributes: new { @class = "control-label font-weight-bold" })
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.ReplStaffReq)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card card-body bg-NCDSB-Grey mt-3">
                <div class="col-12">
                    <h4>Expenses</h4>

                    <table id="tblExpenses" class="table">
                        <tbody>
                            <tr>
                                <th>
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().ExpenseTypeID, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().EstimatedCost, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().ActualCost, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.Expenses.SingleOrDefault().Rationale, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th></th>
                            </tr>

                            
                            @foreach (var item in Model.Expenses)
                            {
                            var estimatedCostEditor = Html.EditorFor(e => item.EstimatedCost, new { htmlAttributes = new { @class = "form-control txtEstimatedCost d-none" } });
                            var estimatedCost = new MvcHtmlString("$<span>" + item.EstimatedCost + "</span>");
                                @* cannot input actual cost until application is approved *@
                            var actualCostEditor = new MvcHtmlString("<input type='text' class='form-control txtActualCost cost d-none' title='Actual Cost cannot be entered until the application has been approved.' value = 'TBD' disabled />");
                            var actualCost = new MvcHtmlString("TBD");

                            if (Model.Status.Description == "Approved")
                            {
                                if (item.EstimatedCost == null)
                                {
                                    @* cannot edit estimated cost after application has been approved *@
                                    estimatedCostEditor = new MvcHtmlString("<input type='text' class='form-control txtEstimatedCost cost d-none' title='Estimated Cost cannot be changed after the application has been approved.' value = 'N/A' disabled />");
                                    estimatedCost = new MvcHtmlString("N/A");
                                }
                                else
                                {
                                    estimatedCostEditor = new MvcHtmlString("<input type='text' class='form-control txtEstimatedCost cost d-none' title='Estimated Cost cannot be changed after the application has been approved.' value = '" + item.EstimatedCost + "' disabled />");
                                }

                                actualCostEditor = Html.EditorFor(e => item.ActualCost, new { htmlAttributes = new { @class = "form-control txtActualCost cost d-none" } });

                                if (item.ActualCost != null)
                                {
                                    actualCost = new MvcHtmlString("$<span>" + item.ActualCost + "</span>");
                                }
                            }

                            <tr class="trExpense">
                                <td>
                                    <label>@item.ExpenseType.Description</label>
                                    @Html.DropDownList("ExpenseTypes" + item.ID.ToString(), null, htmlAttributes: new { @class = "form-control ddlExpenseType d-none" })
                                </td>
                                <td>
                                    <label>@estimatedCost</label>
                                    @estimatedCostEditor
                                    <label class="lblInvalidEstCost text-danger d-none">You must provide a valid cost estimate.</label>
                                </td>
                                <td>
                                    <label>@actualCost</label>
                                    @actualCostEditor
                                    <label class="lblInvalidActCost text-danger d-none">You must provide a valid cost estimate.</label>
                                </td>
                                <td>
                                    <label>@item.Rationale</label>
                                    @Html.EditorFor(e => item.Rationale, new { htmlAttributes = new { @class = "form-control txtRationale d-none" } })
                                    <input type="hidden" value="@item.ID" class="txtExpenseID" />
                                </td>
                                <td>
                                    <a onclick="editExpense($(this))" class="edit badge badge-primary text-white">
                                        @Helper.GetIcon(Helper.Icons.Edit, 3, "white")
                                        <br />
                                        Edit
                                    </a>
                                    <a onclick="acceptExpense($(this))" class="accept badge badge-success text-white d-none">
                                        @Helper.GetIcon(Helper.Icons.Check, 3, "white")
                                        <br />
                                        Done
                                    </a>
                                    <a onclick="cancelExpense($(this))" class="accept badge badge-danger text-white d-none">
                                        @Helper.GetIcon(Helper.Icons.Cancel, 3, "white")
                                        <br />
                                        Cancel
                                    </a>
                                </td>
                            </tr>
                            }
                            @{
                                var estCostPlaceholder = "";
                                var estCostDisabled = "";
                                var actCostPlaceholder = "";
                                var actCostDisabled = "";
                                if (Model.Status.Description != "Approved")
                                {
                                    actCostPlaceholder = "TBD";
                                    actCostDisabled = "disabled";
                                }
                                else
                                {
                                    estCostPlaceholder = "N/A";
                                    estCostDisabled = "disabled";
                                }
                            }
                            @*Needs an "Add Expense" heading*@
                            <tr id="trAddExpense" class="rgba-grey-light">
                                <td>
                                    @Html.DropDownList("ExpenseTypeID", null, "Select Expense Type...", htmlAttributes: new { @class = "form-control ddlExpenseType", @id = "ddlExpenseType" })
                                    <label class="lblInvalidType text-danger d-none">You must select an expense type.</label>
                                </td>
                                <td>
                                    <input type="text" class="form-control txtEstimatedCost cost" value="@estCostPlaceholder" @estCostDisabled />
                                    <label class="lblInvalidEstCost text-danger d-none">You must provide a valid cost estimate.</label>
                                </td>
                                <td>
                                    <input type="text" class="form-control txtActualCost cost" value="@actCostPlaceholder" @actCostDisabled />
                                    <label class="lblInvalidActCost text-danger d-none">You must provide the actual cost.</label>
                                </td>
                                <td>
                                    <input type="text" class="form-control txtRationale" />
                                </td>
                                <td>
                                    <a onclick="addExpense()" class="btn btn-success mt-3">
                                        @Helper.GetIcon(Helper.Icons.Plus, 1, "white")
                                    </a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(".txtEstimatedCost").keydown(function () {
            $(this).siblings("label.text-danger").addClass("d-none");
        });
        $(".txtActualCost").keydown(function () {
            $(this).siblings("label.text-danger").addClass("d-none");
        });
        $(".ddlExpenseType").change(function () {
            $(this).siblings("label.text-danger").addClass("d-none");
        });

        @*function validExpenseForm()
        {
            // innocent until proven guilty
            $(".lblInvalidEstCost").addClass("d-none");
            $(".lblInvalidActCost").addClass("d-none");

            var result = true,
                costPattern = /^\d+(\.\d{0,2})?$/, // matches a number with up to two decimals
                approved = @Model.Status.Description == "Approved",
                $this;

            $(".trExpense").each(function ()
            {
                $this = $(this);

                if (approved) {
                    if (!costPattern.test($this.find("txtActualCost").val())) {
                        result = false
                        $this.find("lblInvalidActCost").removeClass("d-none");
                    }
                }
                else if (!costPattern.test($this.find("txtEstimatedCost").val())) {
                    result = false
                    $this.find("lblInvalidEstCost").removeClass("d-none");
                }

                return result;
            });

        }*@

        function applicationIsApproved() {
            return $("#lblStatus").html() == "Approved";
        }

        function validExpense($row) {
            var typeID = $row.find(".ddlExpenseType").val(),
                estCost = $row.find(".txtEstimatedCost").val(),
                actCost = $row.find(".txtActualCost").val(),
                approved = applicationIsApproved();

            $row.find("label.text-danger").addClass("d-none");

            var result = true;

            if (typeID == "") {
                result = false;
                $row.find(".lblInvalidType").removeClass("d-none");
            }

            var costPattern = /^\d+(\.\d{0,2})?$/; // matches a number with up to two decimals

            if (!approved && !costPattern.test(estCost)) {
                result = false
                $row.find(".lblInvalidEstCost").removeClass("d-none");
            }

            if (approved && (actCost == "" || !costPattern.test(actCost))) {
                result = false
                $row.find(".lblInvalidActCost").removeClass("d-none");
            }

            return result;
        }

        // adds the expense to the table if valid
        function addExpense() {
            var $row = $("#trAddExpense"),
                $ddlType = $row.find(".ddlExpenseType");

            if (validExpense($row)) {
                // create a clone of the input row
                // note: cloning an existing row (rather than the input row) is not possible because there may be none
                var newRow = $row.clone();

                // set the value of the ddl, and remove the default selection (first child)
                newRow.removeAttr("id").removeClass().addClass("trExpense").find(".ddlExpenseType").val($ddlType.val()).children().first().remove();

                // hide the input controls and append a label for each value
                var $newDdlType = newRow.find(".ddlExpenseType"),
                    $newTxtRationale = newRow.find(".txtRationale");

                $newDdlType.addClass("d-none").before("<label>" + $newDdlType.children(":selected").text() + "</label>");

                newRow.find(".cost").addClass("d-none").each(function () {
                    var $this = $(this),
                        v = $this.val();

                    if (v == "N/A" || v == "TBD")
                        $this.before("<label><span>" + v + "</span></label>");
                    else
                        $this.val(parseFloat($this.val()).toFixed(2)).before("<label>$<span>" + $this.val() + "</span></label>");
                });

                $newTxtRationale.addClass("d-none").before("<label>" + $newTxtRationale.val() + "</label>");

                // replace the "+" button with edit, confirm, and delete buttons
                newRow.find(".btn-success").replaceWith(
                    "<a onclick='editExpense($(this))' class='edit badge badge-primary text-white'>@Helper.GetIcon(Helper.Icons.Edit, 3, "white")<br />Edit</a>" +
                    "<a onclick='acceptExpense($(this))' class='accept badge badge-success text-white d-none'>@Helper.GetIcon(Helper.Icons.Check, 3, "white")<br />Done</a>" +
                    "<a onclick='removeExpense($(this))' class='remove btn btn-danger text-white'>@Helper.GetIcon(Helper.Icons.Minus, 1, "white")</a>" +
                    "<a onclick='cancelExpense($(this))' class='cancel badge badge-danger text-white d-none'>@Helper.GetIcon(Helper.Icons.Cancel, 3, "white")<br />Cancel</a>"
                );

                // append the new row to the table
                $row.before(newRow);

                // clear the input fields
                $ddlType.prop("selectedIndex", 0);
                txtBoxesToClear = $row.find("input").not(applicationIsApproved() ? ".txtEstimatedCost" : ".txtActualCost").val("");
            }
        }

        // removes an expense from the table
        function removeExpense($btnClicked) {
            $btnClicked.closest(".trExpense").remove();
        }

        // converts a labels to input controls
        function editExpense($btnEdit) {
            var $row = $btnEdit.closest(".trExpense");

            $row.find("label, a").addClass("d-none").siblings("select, input, a.accept, a.cancel").removeClass("d-none");
            $("a.edit, a.remove").addClass("d-none");
        }

        // converts input controls into labels, hides the done/cancel buttons, and shows the edit button
        function doneEditingExpense($row) {
            $row.find("label:not(.text-danger), a").removeClass("d-none").siblings("select, input, a.accept, a.cancel, label.text-danger").addClass("d-none");

            $("a.edit, a.remove").removeClass("d-none");
        }

        // validates an expense row and turns off edit mode
        function acceptExpense($btnOk) {
            var $row = $btnOk.closest(".trExpense");

            if (validExpense($row)) {
                var $ddlType = $row.find(".ddlExpenseType"),
                    $txtEstCost = $row.find(".txtEstimatedCost"),
                    $txtActCost = $row.find(".txtActualCost"),
                    $txtRationale = $row.find(".txtRationale"),
                    estCost = $txtEstCost.val(),
                    actCost = $txtActCost.val();
                // set the labels to display the updated values
                $ddlType.prev().html($ddlType.children(":selected").text());

                if (estCost != "N/A")
                    $txtEstCost.prev().html("$<span>" + parseFloat(estCost).toFixed(2) + "</span>");

                if (actCost == "")
                    $txtActCost.prev().html("<span>TBD</span>");
                else if (actCost != "TBD")
                    $txtActCost.prev().html("$<span>" + parseFloat(actCost).toFixed(2) + "</span>");

                $txtRationale.prev().html($txtRationale.val());

                doneEditingExpense($row);
            }
        }

        function cancelExpense($btnCancel) {
            var $row = $btnCancel.closest(".trExpense");

            var $ddlType = $row.find(".ddlExpenseType"),
                $txtEstCost = $row.find(".txtEstimatedCost"),
                $txtActCost = $row.find(".txtActualCost"),
                $txtRationale = $row.find(".txtRationale");
            // reset the input values to the label values
            $ddlType.children("option").filter(function () {
                return $(this).text() == $ddlType.prev().html();
            }).prop("selected", true);
            $txtEstCost.val($txtEstCost.prev().children("span").html());
            $txtActCost.val($txtActCost.prev().children("span").html());
            $txtRationale.val($txtRationale.prev().html());

            doneEditingExpense($row);
        }

        $("#btnSubmit").click(function () {

            var expenseBatch = [],
                applicationID = $("#applicationID").val();

            $(".trExpense").each(function () {
                var row = $(this);

                var expense = {
                    ID: row.find(".txtExpenseID").val(),
                    ExpenseTypeID: row.find(".ddlExpenseType").val(),
                    EstimatedCost: row.find(".txtEstimatedCost").val(),
                    ActualCost: row.find(".txtActualCost").val(),
                    Rationale: row.find(".txtRationale").val(),
                    ApplicationID: applicationID
                };

                expenseBatch.push(expense);
            });

            $.ajax({
                type: "POST",
                url: "/Expenses/AddOrUpdateExpenses",
                data: JSON.stringify(expenseBatch),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    //$("#frmEditApplication").submit();
                    alert(response);
                }
            });
        });
    </script>
}