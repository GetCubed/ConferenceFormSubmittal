@model ConferenceFormSubmittal.Models.Mileage

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Mileage</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.TravelDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TravelDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TravelDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.StartAddress, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("Sites", null, "Select A Site", htmlAttributes: new { @class = "form-control", @id = "ddlStartSite" })
            Enter a Custom Location?<input type="checkbox" id="chkCustomStartLocation" />
            @Html.EditorFor(model => model.StartAddress, new { htmlAttributes = new { @class = "form-control", @id = "txtStartAddress" } })
            @Html.ValidationMessageFor(model => model.StartAddress, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EndAddress, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("Sites", null, "Select A Site", htmlAttributes: new { @class = "form-control", @id = "ddlEndSite" })
            Enter a Custom Location?<input type="checkbox" id="chkCustomEndLocation" />
            @Html.EditorFor(model => model.EndAddress, new { htmlAttributes = new { @class = "form-control", @id = "txtEndAddress" } })
            @Html.ValidationMessageFor(model => model.EndAddress, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
            <p  class = "control-label col-md-2" >Kilometres</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.Kilometres, new { htmlAttributes = new { @class = "form-control", @id = "txtKilometres", @disabled = "disabled" } })
            @Html.ValidationMessageFor(model => model.Kilometres, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Feedback, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Feedback, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Feedback, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            @Html.DropDownList("StatusID", null, htmlAttributes: new { @class = "form-control", @hidden = "hidden" })
            @Html.ValidationMessageFor(model => model.StatusID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            @Html.DropDownList("EmployeeID", null, htmlAttributes: new { @class = "form-control", @hidden = "hidden" })
            @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <p  class = "control-label col-md-2" >Attached to Application</p>
        <div class="col-md-10">
            @Html.DropDownList("ApplicationID", null, "None", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ApplicationID, "", new { @class = "text-danger" })
        </div>
    </div>

    <a onclick="GetRoute()" class="btn btn-success mt-3">Get Route</a>

    <div class="col-6" id="dvMap" style="min-height:500px">
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQoBa1Dcsary4e_iMueoDfG8taMDb8IKI&libraries=places" type="text/javascript"></script>

    @*This script is the actual google api calculatin the distance and cost(with dummy rate) between two locations*@
    <script>

        var source, destination;
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();

        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 43.002662, lng: -79.2554264 },
            zoom: 15,
            mapTypeId: 'roadmap'
        });

        google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('txtStartAddress'));
            new google.maps.places.SearchBox(document.getElementById('txtEndAddress'));
            directionsDisplay = new google.maps.DirectionsRenderer({ /*'draggable': true*/ });
        });

        function GetRoute() {

            directionsDisplay.setMap(map);

            $chkCustomStartLocation = document.getElementById("chkCustomStartLocation");
            $chkCustomEndLocation = document.getElementById("chkCustomEndLocation");

            var ddlStartSite = document.getElementById("ddlStartSite");
            var ddlStartSiteValue = ddlStartSite[ddlStartSite.selectedIndex].value;
            var ddlEndSite = document.getElementById("ddlEndSite");
            var ddlEndSiteValue = ddlEndSite[ddlEndSite.selectedIndex].value;

            if (!$chkCustomStartLocation.checked) {
                source = ddlStartSiteValue;
            }
            else {
                source = document.getElementById("txtStartAddress").value;
            }

            if (!$chkCustomEndLocation.checked) {
                destination = ddlEndLocationValue;
            }
            else {
                destination = document.getElementById("txtEndAddress").value;
            }

            var request = {
                origin: source,
                destination: destination,
                travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                }
            });

            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix({
                origins: [source],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {

                if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.text;
                    //var duration = response.rows[0].elements[0].duration.value;
                    var dvDistance = document.getElementById("txtKilometres");
                    //this will be changed from dvcost to Cost once the database supports it
                    var dvCost = document.getElementById("txtReimbursement");
                    //duration = parseFloat(duration / 60).toFixed(2);
                    //This is a dummy rate value for Cost per Km
                    var rate = 5;
                    //Converts the Distance from meters to kilometers
                    var distancecost = response.rows[0].elements[0].distance.value / 1000;
                    var cost = distancecost * rate;

                    //dvDistance.value = distance;//"Distance: " + distance; CURRENTLY COMMITED OUT FOR TRANSFER FORMATING
                    dvDistance.value = distancecost;//CURRENTLY USING THIS SINCE ITS THE RAW NUMBER INSTEAD OF ALREADY FORMATTED
                    dvCost.value = cost//;"Cost: $" + cost; CURRENTLY COMMITED OUT FOR TRANSFER FORMATING
                    //dvDistance.innerHTML += "Time:" + duration + " min";

                } else {
                    alert("Unable to find the distance via road.");
                }
            });
        }

    </script>
}
