@model ConferenceFormSubmittal.Models.Mileage
@using ConferenceFormSubmittal.Utilities;
@{
    ViewBag.Title = "Edit";
}

<!--HEADING-->
<div class="row pt-3">
    <div class="col-12">
        <div class="card card-header bg-NCDSB-Grey">
            <h3 class="text-center font-weight-bold">Edit Mileage</h3>
        </div>
    </div>
</div>



@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmEditMileage" }))
{
    @Html.AntiForgeryToken()


    @*---------------------FILTER BAR-------------------------------------------*@
    <div class="row pt-3">
        <div class="col-12">
            <div class="card bg-NCDSB-Grey">
                <div class="card-header">

                    <div class="row">
                        <div class="col-12 d-flex justify-content-between">

                            <a href='@Url.Action("Index", "Mileages")' class="btn btn-primary">
                                @Helper.GetIcon(Icons.Back) Go Back
                            </a>

                            <button id="btnDraft" type="button" value="Draft" class="btn btn-info float-right">
                                @Helper.GetIcon(Icons.Draft) Save as Draft
                            </button>

                            <button type="submit" class="btn btn-success ">
                                @Helper.GetIcon(Icons.Save) Save
                            </button>

                            @Html.EditorFor(model => model.EmployeeID, new { htmlAttributes = new { @class = "form-control", @id = "txtEmployeeID", @Value = "1", @hidden = "hidden" } })
                            @Html.EditorFor(model => model.StatusID, new { htmlAttributes = new { @class = "form-control", @id = "txtStatusID", @Value = "1", @hidden = "hidden" } })
                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>


    @*---------------------Edit Form------------------------------------------------------------------------------------*@
    <div class="row pt-3">

        <div class="col-8">
            <div class="card bg-NCDSB-Grey">
                <div class="card-body">
                    <div>
                        @Html.LabelFor(model => model.Application.Conference.Name, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                        @Html.DisplayFor(model => model.Application.Conference.Name)
                    </div>
                    <div>
                        @Html.LabelFor(model => model.Application.Conference.Location, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                        @Html.DisplayFor(model => model.Application.Conference.Location)
                    </div>
                    <div>
                        @Html.LabelFor(model => model.Application.DepartureDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                        @Html.DisplayFor(model => model.Application.DepartureDate)
                    </div>
                    <div>
                        @Html.LabelFor(model => model.Application.ReturnDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                        @Html.DisplayFor(model => model.Application.ReturnDate)
                    </div>


                    @*---------------------ROW------------------------------------------------------------------------------------*@
                    <div class="row pt-3">
                        <div class="col-1">
                            @Html.LabelFor(model => model.StartAddress, htmlAttributes: new { @class = "control-label font-weight-bold" })
                        </div>
                        <div class="col-3">
                            @Html.DropDownList("Sites", null, "Custom Location", htmlAttributes: new { @class = "form-control", @id = "ddlStartSite" })
                            @*Enter a Custom Location?<input type="checkbox" id="chkCustomStartLocation" />*@
                            @Html.EditorFor(model => model.StartAddress, new { htmlAttributes = new { @class = "form-control d-block bg-NCDSB-GreyLight", @id = "txtStartAddress", @placeholder = "Enter an Address" } })
                            @Html.ValidationMessageFor(model => model.StartAddress, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.EndAddress, htmlAttributes: new { @class = "control-label font-weight-bold" })
                        </div>
                        <div class="col-3">
                            @Html.DropDownList("Sites", null, "Custom Location", htmlAttributes: new { @class = "form-control", @id = "ddlEndSite" })
                            @*Enter a Custom Location?<input type="checkbox" id="chkCustomEndLocation" />*@
                            @Html.EditorFor(model => model.EndAddress, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight", @id = "txtEndAddress", @placeholder = "Enter an Address" } })
                            @Html.ValidationMessageFor(model => model.EndAddress, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-12">
                            <a onclick="GetRoute()" class="btn btn-primary d-block">
                                <i class="fa fa-map-marker fa-2x"></i>
                                @Helper.GetIcon(Icons.Marker)
                                Get Route
                            </a>
                        </div>

                    </div>

                    @*---------------------ROW------------------------------------------------------------------------------------*@
                    <div class="row pt-3">
                        <div class="col-6">
                            @Html.LabelFor(model => model.TravelDate, htmlAttributes: new { @class = "control-label font-weight-bold" })
                            @Html.EditorFor(model => model.TravelDate, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight", @id = "txtTravelDate" } })
                            @Html.ValidationMessageFor(model => model.TravelDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-6">
                        <div class="col-2">
                            <label class="font-weight-bold">Attached Conference</label>
                        </div>
                        <div class="col-3">
                            @*make this hidden once it pulls the right value*@
                            @Html.DropDownList("ApplicationConferenceName", null, "None", htmlAttributes: new { @class = "form-control", @id = "ddlApplicationID" })
                        </div>
                        <div class="col-2">
                            @Html.LabelFor(model => model.RoundTrip, htmlAttributes: new { @class = "control-label font-weight-bold" })
                            @Html.EditorFor(model => model.RoundTrip, new { htmlAttributes = new { @class = "form-control bg-NCDSB-GreyLight", @id = "chkRoundTrip" } })
                        </div>
                        <div class="col-12">
                            <hr />
                        </div>

  
                    </div>


                    @*---------------------ERROR MESSAGES ---------------------*@
                    <div class="row pt-3">
                        <div class="col-12">

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.ID)
                        </div>
                    </div>


                </div>

                <div class="card-footer rgba-grey-light">
                    @*---------------------ROW------------------------------------------------------------------------------------*@
                    <div class="row pt-3 ">
                        <div class="col-2">
                            <label" class="font-weight-bold">Kilometers</label">
                        </div>
                        <div class="col-3">
                            @Html.EditorFor(model => model.Kilometres, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control text-dark",
                                    @id = "txtKilometres",
                                    @disabled = "disabled"
                                }
                            })
                            @Html.ValidationMessageFor(model => model.Kilometres, "", new { @class = "text-danger" })

                        </div>
                        <div class="col-2">
                            <label class="font-weight-bold">Mileage Claim</label>
                        </div>
                        <div class="col-3">
                            <input class="form-control text-dark" type="text" id="txtReimbursement" disabled="disabled" />
                        </div>
                    </div>


                </div>

            </div>

        </div>




        @*-------------------------  GOOGLE MAP Column ---------------*@
        <div class="col-4">
            <div class="card bg-NCDSB-Grey">
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="col-12" id="dvMap" style="min-height:400px"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQoBa1Dcsary4e_iMueoDfG8taMDb8IKI&libraries=places" type="text/javascript"></script>

    @*This script is the actual google api calculatin the distance and cost(with dummy rate) between two locations*@
    <script>

        window.onload = function () {
            var txtMileage = document.getElementById("txtKilometres").value
            var txtReimbursement = document.getElementById("txtReimbursement");

            document.getElementById("txtReimbursement").value = (txtMileage / 2).toFixed(2);

        }

        $("#btnDraft").click(function () {
            var $status = $("#txtStatusID");

            $status.val(4);
            document.getElementById("frmEditMileage").submit();
        });

        var source, destination, $chkCustomStartLocation, $chkCustomEndLocation;
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();

        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 43.002662, lng: -79.2554264 },
            zoom: 15,
            mapTypeId: 'roadmap'
        });

        google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('txtStartAddress'));
            new google.maps.places.SearchBox(document.getElementById('txtEndAddress'));
            directionsDisplay = new google.maps.DirectionsRenderer({ /*'draggable': true*/ });
        });

        function GetRoute() {

            directionsDisplay.setMap(map);

            //$chkCustomStartLocation = document.getElementById("chkCustomStartLocation");
            //$chkCustomEndLocation = document.getElementById("chkCustomEndLocation");
            $chkRoundTrip = document.getElementById("chkRoundTrip");

            var txtStartSite = document.getElementById("txtStartAddress");
            var ddlStartSite = document.getElementById("ddlStartSite");
            var ddlStartSiteValue = ddlStartSite[ddlStartSite.selectedIndex].value;
            var txtEndSite = document.getElementById("txtEndAddress");
            var ddlEndSite = document.getElementById("ddlEndSite");
            var ddlEndSiteValue = ddlEndSite[ddlEndSite.selectedIndex].value;

            if (ddlStartSiteValue != "") {
                txtStartSite.value = ddlStartSiteValue;
            }

            if (ddlEndSiteValue != "") {
                txtEndSite.value = ddlEndSiteValue;
            }

            source = txtStartSite.value;
            destination = txtEndSite.value;

            //if ($chkCustomStartLocation.checked) {
            //    source = txtStartSite.value;
            //}
            //else {
            //    source = ddlStartSiteValue;
            //}

            //if ($chkCustomEndLocation.checked) {
            //    destination = txtEndSite.value;
            //}
            //else {
            //    destination = ddlEndSiteValue;
            //}

            if ($chkRoundTrip.checked) {
                roundTrip = 2;
            }
            else {
                roundTrip = 1;
            }

            var request = {
                origin: source,
                destination: destination,
                travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                }
            });

            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix({
                origins: [source],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {

                if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.text;
                    //var duration = response.rows[0].elements[0].duration.value;
                    var dvDistance = document.getElementById("txtKilometres");
                    //this will be changed from dvcost to Cost once the database supports it
                    var dvCost = document.getElementById("txtReimbursement");
                    //duration = parseFloat(duration / 60).toFixed(2);
                    //This is a dummy rate value for Cost per Km
                    var rate = .5;
                    //Converts the Distance from meters to kilometers
                    var distancecost = response.rows[0].elements[0].distance.value / 1000;
                    var cost = distancecost * rate;

                    //dvDistance.value = distance;//"Distance: " + distance; CURRENTLY COMMITED OUT FOR TRANSFER FORMATING
                    dvDistance.value = distancecost;//CURRENTLY USING THIS SINCE ITS THE RAW NUMBER INSTEAD OF ALREADY FORMATTED
                    dvCost.value = cost;//;"Cost: $" + cost; CURRENTLY COMMITED OUT FOR TRANSFER FORMATING
                    //dvDistance.innerHTML += "Time:" + duration + " min";

                } else {
                    alert("Unable to find the distance via road.");
                }
            });
        }

    </script>
}
