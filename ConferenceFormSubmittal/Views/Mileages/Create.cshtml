@model ConferenceFormSubmittal.Models.Mileage

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmCreateMileage" }))
{
    @Html.AntiForgeryToken()

    //change type to back to button, use submit for testing?
    <input id="btnSubmit" type="button" value="Submit" class="btn btn-primary btn-block mb-3" />

    <table id="tblMileages" class="table">
        <tbody>
            <tr>
                <th>
                    @Html.LabelFor(model => model.TravelDate, htmlAttributes: new { @class = "control-label font-bold" })
                </th>
                <th>
                    @Html.LabelFor(model => model.StartAddress, htmlAttributes: new { @class = "control-label font-bold" })
                </th>
                <th>
                    @Html.LabelFor(model => model.EndAddress, htmlAttributes: new { @class = "control-label font-bold" })
                </th>
                <th>
                    <b>Kilometres</b>
                </th>
                <th>
                    <b>Attach Application?@*Should be conference?*@</b>
                </th>
                <th>
                    @Html.LabelFor(model => model.RoundTrip, htmlAttributes: new { @class = "control-label font-bold" })
                </th>
                <th>
                    <b class="d-block">Mileage Claim</b>
                </th>
                <th></th>
            </tr>
            <tr @*id="trAddMileage"*@ class="rgba-grey-light">
                <td>
                    @Html.EditorFor(model => model.TravelDate, new { htmlAttributes = new { @class = "form-control", @id = "txtTravelDate" } })
                    @Html.ValidationMessageFor(model => model.TravelDate, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.DropDownList("Sites", null, "Select A Site", htmlAttributes: new { @class = "form-control", @id = "ddlStartSite" })
                    Enter a Custom Location?<input type="checkbox" id="chkCustomStartLocation" />
                    @Html.EditorFor(model => model.StartAddress, new { htmlAttributes = new { @class = "form-control", @id = "txtStartAddress", @placeholder = "Enter an Address" } })
                    @Html.ValidationMessageFor(model => model.StartAddress, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.DropDownList("Sites", null, "Select A Site", htmlAttributes: new { @class = "form-control", @id = "ddlEndSite" })
                    Enter a Custom Location?<input type="checkbox" id="chkCustomEndLocation"/>
                    @Html.EditorFor(model => model.EndAddress, new { htmlAttributes = new { @class = "form-control", @id = "txtEndAddress", @placeholder = "Enter an Address" } })
                    @Html.ValidationMessageFor(model => model.EndAddress, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.EditorFor(model => model.Kilometres, new { htmlAttributes = new { @class = "form-control", @id = "txtKilometres"@*, @disabled = "disabled"*@ } })
                    @Html.ValidationMessageFor(model => model.Kilometres, "", new { @class = "text-danger" })
                </td>
                <td>
                    @*this should actually display the conference name not the application rationale*@
                    @Html.DropDownList("ApplicationID", null, "None", htmlAttributes: new { @class = "form-control", @id = "ddlApplicationID" })
                </td>
                <td>
                    @Html.EditorFor(model => model.RoundTrip, new { htmlAttributes = new { @class = "form-control", @id = "chkRoundTrip" } })
                </td>
                <td>
                    <input type="text" id="txtReimbursement" disabled="disabled" />
                </td>
                <td>
                    <a onclick="GetRoute()" class="btn btn-success mt-3">Get Route</a>
                    <a onclick="addMileage()" class="btn btn-success mt-3">
                        @*<i class="fa fa-plus"></i>*@Add to List
                    </a>
                    @Html.EditorFor(model => model.EmployeeID, new { htmlAttributes = new { @class = "form-control", @id = "txtEmployeeID", @Value = "1", @hidden = "hidden" } })
                    @Html.EditorFor(model => model.StatusID, new { htmlAttributes = new { @class = "form-control", @id = "txtStatusID", @Value = "1", @hidden = "hidden" } })
                </td>
            </tr>
            <tr><td colspan="7"><label id="txtValid"></label></td></tr>
            <tr id="trAddMileage"><td></td></tr>
        </tbody>
    </table>
    <div class="col-6" id="dvMap" style="min-height:500px">
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

        function validMileage(travelDate, startAddress, endAddress, kilometres) {
            
            var result = true;
            var valid = $("#txtValid");
            valid.empty();

            if (travelDate == "") {
                result = false;
                valid.append("There must be a Travel Date.");
            }
            if (startAddress == "") {
                result = false;
                valid.append("There must be a Start Address.");
            }
            if (endAddress == "") {
                result = false;
                valid.append("There must be a End Address.");
            }
            if (typeof kilometres == 'number' || kilometres == "") {
                result = false;
                valid.append("There must be a Kilometre amount.");
            }

            return result;
        }

        // adds the mileage to the table if valid
        function addMileage() {

            // get values
            var $txtTravelDate = $("#txtTravelDate"),
                $txtKilometres = $("#txtKilometres"),
                $ddlAppID = $("#ddlApplicationID"),
                $chkRoundTrip = $("#chkRoundTrip"),
                $txtreimbursement = $("#txtReimbursement"),
                travelDate = $txtTravelDate.val(),
                kilometres = $txtKilometres.val(),
                app = $ddlAppID.find(":selected").val(),
                appID = $ddlAppID.val(),
                roundTrip = $chkRoundTrip.is(':checked'),
                roundTriptxt = roundTrip ? "Yes" : "No";
                reimbursement = $txtreimbursement.val();
            
            var $txtStartAddress = $("#txtStartAddress"),
                $ddlStartAddress = $("#ddlStartSite"),
                $txtEndAddress = $("#txtEndAddress"),
                $ddlEndAddress = $("#ddlEndSite"),
                $chkCustomStartLocation = $("#chkCustomStartLocation"),
                $chkCustomEndLocation = $("#chkCustomEndLocation"),
                customStartLocation = $chkCustomStartLocation.is(":checked"),
                customEndLocation = $chkCustomEndLocation.is(":checked");

            if (!customStartLocation) {
                var startAddressName = $ddlStartAddress.find(":selected").val(),
                    startAddress = $ddlStartAddress.val();
            }
            else {
                var startAddressName = $txtStartAddress.val(),
                    startAddress = $txtStartAddress.val();
            }

            if (!customEndLocation) {
                var endAddressName = $ddlEndAddress.find(":selected").val(),
                    endAddress = $ddlEndAddress.val();
            }
            else {
                var endAddressName = $txtEndAddress.val(),
                    endAddress = $txtEndAddress.val();
            }
            
            if (confirm("Do you want to add this Mileage Entry?")) {
                if (validMileage(travelDate, startAddress, endAddress, kilometres)) {
                    // add the expense to the table
                    $("#trAddMileage").before(
                        "<tr class='trMileage'>" +
                        "<td class='travelDate'>" + travelDate + "</td>" +
                        "<td class='startAddress' data-startAddress='" + startAddress + "'>" + startAddressName + "</td>" +
                        "<td class='endAddress' data-endAddress='" + endAddress + "'>" + endAddressName + "</td>" +
                        "<td class='kilometres' data-kilometres='" + kilometres + "' > " + kilometres + " km</td > " +
                        "<td class='applicationID' data-id='" + appID + "'>" + app + "</td>" +
                        "<td class='roundTrip' data-roundTrip='" + roundTrip + "' > " + roundTriptxt + "</td > " +
                        "<td class='reimbursement'>" + reimbursement + "</td>" +
                        "<td><a onclick='removeMileage($(this))' class='removeMileage btn btn-danger'><i class='fa fa-minus'></i></a></td>" +
                        "</tr>");

                    // clear the input fields
                    //$txtTravelDate.val("");
                    $txtStartAddress.val("");
                    $txtEndAddress.val("");
                    $ddlStartAddress.val("");
                    $ddlEndAddress.val("");
                    $txtKilometres.val("");
                    $chkRoundTrip.val("");
                    $txtreimbursement.val("");
                }
            }
        }

        // removes an expense from the table
        function removeMileage($row) {
            if (confirm("Do you want to delete this Mileage Entry?")) {
                $row.closest(".trMileage").remove();
            }
        }

        $("#btnSubmit").click(function () {

            var mileageBatch = [];

            if (confirm("Do you want to submit?")) {

                $(".trMileage").each(function () {
                    var row = $(this);

                    var mileage = {
                        TravelDate: row.find(".travelDate").html(),
                        StartAddress: row.find(".startAddress").data("startAddress"),
                        EndAddress: row.find(".endAddress").data("endAddress"),
                        Kilometres: row.find(".kilometres").data("kilometres"),
                        ApplicationID: row.find(".applicationID").data("id"),
                        RoundTrip: row.find(".roundTrip").data("roundTrip"),
                        StatusID: 1,
                        EmployeeID: 1 //needs to reference the logged in user
                    };

                    mileageBatch.push(mileage);
                });

                $.ajax({
                    type: "POST",
                    url: "/Mileages/AddMileages",
                    data: JSON.stringify(mileageBatch),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        //alert((response + 1) + " mileage(s) added.");
                        $("#frmCreateMileage").submit();
                    }
                });
            }
        });
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQoBa1Dcsary4e_iMueoDfG8taMDb8IKI&libraries=places" type="text/javascript"></script>

    @*This script is the actual google api calculatin the distance and cost(with dummy rate) between two locations*@
    <script>

        var source, destination, $chkCustomStartLocation,$chkCustomEndLocation;
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();

        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 43.002662, lng: -79.2554264 },
            zoom: 15,
            mapTypeId: 'roadmap'
        });

        google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('txtStartAddress'));
            new google.maps.places.SearchBox(document.getElementById('txtEndAddress'));
            directionsDisplay = new google.maps.DirectionsRenderer({ /*'draggable': true*/ });
        });

        function GetRoute() {

            directionsDisplay.setMap(map);

            $chkCustomStartLocation = document.getElementById("chkCustomStartLocation");
            $chkCustomEndLocation = document.getElementById("chkCustomEndLocation");
            
            var ddlStartSite = document.getElementById("ddlStartSite");
            var ddlStartSiteValue = ddlStartSite[ddlStartSite.selectedIndex].value;
            var ddlEndSite = document.getElementById("ddlEndSite");
            var ddlEndSiteValue = ddlEndSite[ddlEndSite.selectedIndex].value;
            
            if (!$chkCustomStartLocation.checked) {
                source = ddlStartSiteValue;
            }
            else {
                source = document.getElementById("txtStartAddress").value;
            }

            if (!$chkCustomEndLocation.checked) {
                destination = ddlEndLocationValue;
            }
            else {
                destination = document.getElementById("txtEndAddress").value;
            }

            var request = {
                origin: source,
                destination: destination,
                travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                }
            });

            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix({
                origins: [source],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {

                if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.text;
                    var dvDistance = document.getElementById("txtKilometres");
                    //this will be changed from dvcost to Cost once the database supports it
                    var dvCost = document.getElementById("txtReimbursement");
                    //This is a dummy rate value for Cost per Km
                    var rate = 5;
                    //Converts the Distance from meters to kilometers
                    var distancecost = response.rows[0].elements[0].distance.value / 1000;
                    var cost = distancecost * rate;
                    
                    dvDistance.value = distancecost.toFixed(2);
                    dvCost.value = "$" + cost.toFixed(2)

                } else {
                    alert("Unable to find the distance via road.");
                }
            });
        }

    </script>
}
