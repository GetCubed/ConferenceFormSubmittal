@model ConferenceFormSubmittal.Models.Mileage
@using ConferenceFormSubmittal.Utilities;
@{
    ViewBag.Title = "Create";
}


<!--HEADING-->
<div class="row pt-3">
    <div class="col-12">
        <div class="card card-header bg-NCDSB-Grey">
            <h3 class="text-center font-weight-bold">Create Mileages</h3>
        </div>
    </div>
</div>



@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmCreateMileage" }))
{
    @Html.AntiForgeryToken()


<div class="row pt-3">

    <div class="col-8">
        @*---------------------------Determine Route Row------------------------------------------*@
        <div class="row">
            <div class="col-12">
                <div class="card bg-NCDSB-Grey">
                    <div class="card-header">
                        <h4>Conference </h4>
                    </div>
                    <div class="card-body ">
                        @*---------------------ROW--------ATTACH TO CONFERENCE----------------------------------------------------------------*@
                        <div class="row pt-3">

                            @if (ViewBag.Application == null)
        {
                    <div class="col-6">
                        <div class="font-weight-bold">
                            Attach to Conference?
                            @Html.DropDownList("ApplicationConferenceName", null, "None", htmlAttributes: new { @class = "form-control", @id = "ddlApplicationID" })
                        </div>
                    </div>
                    <div class="col-6 ">
                        <a onclick="attachConference()" class="btn btn-primary mt-3 d-block ">
                            @Helper.GetIcon(Icons.Draft, 2, "white")
                            Attach Conference
                        </a>
                    </div>
}
                        </div>

                        
                        @*---------------------ROW--------CONFERENCE DETAILS-------------------------------------------------------------*@
                        <div class="row pt-3">

                            @if (ViewBag.Application != null)
    {
                        @Html.Hidden("ApplicationID", new { @value = ViewBag.Application.ID })
}
                            
                            @if (ViewBag.Application != null)
    {<div class="col-6">
    @Html.LabelFor(model => model.Application.Conference.Name, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
    @if (ViewBag.Application != null)
    {
        @Html.Hidden("ConferenceName", new { @value = ViewBag.Application.Conference.Name })
        @ViewBag.Application.Conference.Name
    }
</div><div class="col-6">
                            @Html.LabelFor(model => model.Application.Conference.Location, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @if (ViewBag.Application != null)
    {
                        @ViewBag.Application.Conference.Location
}
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.Application.DepartureDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @if (ViewBag.Application != null)
    {
                        @ViewBag.Application.DepartureDate.ToShortDateString()
}
                        </div>
                        <div class="col-6">
                            @Html.LabelFor(model => model.Application.ReturnDate, htmlAttributes: new { @class = "control-label d-block font-weight-bold" })
                            @if (ViewBag.Application != null)
    {
                        @ViewBag.Application.ReturnDate.ToShortDateString()
}
                        </div>}


                        </div>
                    </div>
                </div>
            </div>



            <div class="col-12 mt-3">
                <div class="card bg-NCDSB-Grey">
                    <div class="card-header">
                        <h3>Determine Route</h3>
                    </div>
                    <div class="card-body">
                        @*---------------------ROW--------START - END DATE----------------------------------------------------*@
                        <div class="row pt-4">
                            <div class="col-2">
                                @Html.LabelFor(model => model.StartAddress, htmlAttributes: new { @class = "control-label font-weight-bold" })
                            </div>
                            <div class="col-4">
                                @Html.DropDownList("Sites", null, "Custom Address", htmlAttributes: new { @class = "form-control", @id = "ddlStartSite" })
                                @*Enter a Custom Location?<input type="checkbox" id="chkCustomStartLocation" />*@
                                <input type="text" class="form-control d-block" id="txtStartAddress" placeholder="or Enter an Address" />
                            </div>

                            <div class="col-3">
                                @Html.LabelFor(model => model.EndAddress, htmlAttributes: new { @class = "control-label font-weight-bold" })
                            </div>
                            <div class="col-3">
                                @Html.DropDownList("Sites", null, "Custom Address", htmlAttributes: new { @class = "form-control", @id = "ddlEndSite" })
                                @*Enter a Custom Location?<input type="checkbox" id="chkCustomEndLocation" />*@
                                <input type="text" class="form-control d-block" id="txtEndAddress" placeholder="or Enter an Address" />
                            </div>

                            <div class="col-12">
                                <a onclick="GetRoute()" class="btn btn-success d-block">
                                    <i class="fa fa-map-marker fa-2x"></i>
                                    Get Route
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div class="row pt-3">

            @*---------------- MILEAGE FORM ----------------------*@
            <div class="col-12">
                <div class="card bg-NCDSB-Grey">
                    <div class="card-body ">

                        @*---------------------ROW---DATE OF TRAVEL---------------------------------------------------*@
                        <div class="row">
                            <div class="col-6">
                                @Html.LabelFor(model => model.TravelDate, htmlAttributes: new { @class = "control-label font-weight-bold" })

                                <input type="date" class="form-control d-block" id="txtTravelDate" />
                            </div>
                            <div class="col-6">
                                @Html.LabelFor(model => model.RoundTrip, htmlAttributes: new { @class = "control-label font-weight-bold" })
                                <input type="checkbox" class="toggle" id="chkRoundTrip" />
                            </div>
                            <div class="col-12">
                                <hr />
                            </div>
                        </div>


                     


                        @*---------------------ERROR MESSAGES ---------------------*@
                        <div class="row pt-3">
                            <div class="col-12">
                                <label id="txtValid" class="text-danger "> </label>
                            </div>
                        </div>


                    </div>

                    <div class="card-footer rgba-grey-light">
                        @*---------------------ROW------------------------------------------------------------------------------------*@
                        <div class="row pt-3 ">
                            <div class="col-2">
                                <label" class="font-weight-bold">Kilometers</label">
                            </div>
                            <div class="col-3">
                                <input type="text" class="form-control text-dark" id="txtKilometres" disabled="disabled" />
                            </div>
                            <div class="col-2">
                                <label class="font-weight-bold">Mileage Claim</label>
                            </div>
                            <div class="col-3">
                                <input class="form-control text-dark" type="text" id="txtReimbursement" disabled="disabled" />
                            </div>
                        </div>

                        @*---------------------ROW------------------------------------------------------------------------------------*@
                        <div class="row">

                            <div class="col-9">
                                <a onclick="addMileage()" class="btn btn-success mt-3 d-block">
                                    @*<i class="fa fa-plus"></i>*@
                                    <i class="fa fa-plus fa-2x" aria-hidden="true"></i>
                                    Add to List
                                </a>
                            </div>
                            <div class="col-3">
                                <a onclick="Reset()" class="btn btn-danger mt-3 d-block ">
                                    @Helper.GetIcon(Icons.Eraser)
                                    Restart
                                </a>
                            </div>

                        </div>
                    </div>

                </div>
            </div>
        </div>


    </div>


    @*-------------------------  GOOGLE MAP Column ---------------*@
    <div class="col-4">
        <div class="card bg-NCDSB-Grey">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <div class="col-12" id="dvMap" style="min-height:400px"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>


</div>


    //-----Show items basket ----
    <div class="row pt-3">
        <div class="col-12">
            <div class="card bg-NCDSB-Grey">
                <div class="card-header">
                    <button id="btnDraft" type="button" value="Save As Draft" class="btn btn-info float-left">
                        @Helper.GetIcon(Icons.Draft, 2, "white") Save As Draft
                    </button>
                    <button id="btnSubmit" type="button" value="Submit" class="btn btn-primary float-right">
                        <i class="fa fa-paper-plane fa-2x"></i> Submit
                    </button>
                </div>
                <div class="card-body">
                    <table id="tblMileages" class="table">
                        <tbody>
                            <tr>
                                <th>
                                    @Html.LabelFor(model => model.TravelDate, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.StartAddress, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.EndAddress, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    <b>Kilometres</b>
                                </th>
                                <th>
                                    <b>Attached Conference</b>
                                </th>
                                <th>
                                    @Html.LabelFor(model => model.RoundTrip, htmlAttributes: new { @class = "control-label font-bold" })
                                </th>
                                <th>
                                    <b class="d-block">Mileage Claim</b>
                                </th>
                                <th></th>
                            </tr>
                            <tr id="trAddMileage" class="flex-wrap">
                                <td></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="card-footer">
                    <button id="btnSubmit2" type="button" value="Submit" class="btn btn-primary float-right">
                        <i class="fa  fa-paper-plane fa-2x"></i> Submit
                    </button>
                </div>

            </div>


        </div>


    </div>



} @*-----------end of form ---------------*@


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        //attachs a conference to mileage creation
        function attachConference() {
            var $ApplicationID = $("#ddlApplicationID"),
                app = $ApplicationID.find(":selected").text(),
                appID = $ApplicationID.find(":selected").val();

            if (appID > 0) {
                if (confirm("Do you want to attach this Conference, " + app + "? ")) {
                    window.location.replace("/Mileages/Create?ApplicationID=" + appID);
                }
            }
        }

        //resets the mileage creation to detach conference
        function Reset() {
            window.location.replace("/Mileages/Create/");
        }

        //client side validation for individual mileages
        function validMileage(travelDate, startAddress, endAddress, kilometres) {

            var result = true;
            var valid = $("#txtValid");
            valid.empty();

            if (travelDate == "") {
                result = false;
                valid.append("There must be a Travel Date.");
            }
            if (startAddress == "") {
                result = false;
                valid.append("There must be a Start Address.");
            }
            if (endAddress == "") {
                result = false;
                valid.append("There must be a End Address.");
            }
            if (typeof kilometres == 'number' || kilometres == "") {
                result = false;
                valid.append("There must be a Kilometre amount.");
            }

            return result;
        }

        // adds the mileage to the table if valid
        function addMileage() {
            // get values
            var $txtTravelDate = $("#txtTravelDate"),
                $txtKilometres = $("#txtKilometres"),
                $appID = $("#ApplicationID"),
                $con = $("#ConferenceName"),
                $chkRoundTrip = $("#chkRoundTrip"),
                $txtreimbursement = $("#txtReimbursement"),
                travelDate = $txtTravelDate.val(),
                kilometres = $txtKilometres.val(),
                appID = $appID.val(),
                ConName = $con.val(),
                roundTrip = $chkRoundTrip.is(':checked'),
                roundTriptxt = roundTrip ? "Yes" : "No";
                reimbursement = $txtreimbursement.val();

            var $txtStartAddress = $("#txtStartAddress"),
                $ddlStartAddress = $("#ddlStartSite"),
                $txtEndAddress = $("#txtEndAddress"),
                $ddlEndAddress = $("#ddlEndSite");
                
            var startAddress = $txtStartAddress.val();
            var endAddress = $txtEndAddress.val();
            

            if (typeof appID != 'string') {
                ConName = "None";
            }
            else {
                ConName = ConName.slice(9, -2);
            }

            if (confirm("Do you want to add this Mileage Entry?")) {
                if (validMileage(travelDate, startAddress, endAddress, kilometres)) {
                    // add the expense to the table
                    $("#trAddMileage").before(
                        "<tr class='trMileage'>" +
                        "<td class='travelDate'>" + travelDate + "</td>" +
                        "<td class='startAddress'>" + startAddress + "</td>" +
                        "<td class='endAddress'>" + endAddress + "</td>" +
                        "<td class='kilometres'>" + kilometres + "</td > " +
                        "<td class='applicationID' data-id='" + appID + "'>" + ConName + "</td>" +
                        "<td class='roundTrip' data-roundTrip='" + roundTrip + "' > " + roundTriptxt + "</td > " +
                        "<td class='reimbursement'>" + reimbursement + "</td>" +
                        "<td><a onclick='removeMileage($(this))' class='removeMileage btn btn-danger'><i class='fa fa-minus'></i></a></td>" +
                        "</tr>");

                    // clear the input fields
                    //$txtTravelDate.val("");
                    $txtStartAddress.val("");
                    $txtEndAddress.val("");
                    $ddlStartAddress.val("");
                    $ddlEndAddress.val("");
                    $txtKilometres.val("");
                    $chkRoundTrip.val("");
                    $txtreimbursement.val("");
                }
            }
        }

        // removes an expense from the table
        function removeMileage($row) {
            if (confirm("Do you want to delete this Mileage Entry?")) {
                $row.closest(".trMileage").remove();
            }
        }

        //submits the current list
        $("#btnSubmit").click(function () {

            var mileageBatch = [];

            if (confirm("Do you want to submit?")) {

                $(".trMileage").each(function () {
                    var row = $(this);

                    var mileage = {
                        TravelDate: row.find(".travelDate").html(),
                        StartAddress: row.find(".startAddress").html(),
                        EndAddress: row.find(".endAddress").html(),
                        Kilometres: row.find(".kilometres").html(),
                        ApplicationID: row.find(".applicationID").data("id"),
                        RoundTrip: row.find(".roundTrip").data("roundTrip"),
                        StatusID: 1,
                        EmployeeID: 1 
                    };

                    mileageBatch.push(mileage);
                });

                $.ajax({
                    type: "POST",
                    url: "/Mileages/AddMileages",
                    data: JSON.stringify(mileageBatch),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        alert((response) + " mileage(s) added.");
                        $("#frmCreateMileage").submit();
                        window.location = "/Mileages"
                    }
                });
            }
        });

        //saves current list as a draft
        $("#btnDraft").click(function () {

            var mileageBatch = [];

            
                $(".trMileage").each(function () {
                    var row = $(this);

                    var mileage = {
                        TravelDate: row.find(".travelDate").html(),
                        StartAddress: row.find(".startAddress").html(),
                        EndAddress: row.find(".endAddress").html(),
                        Kilometres: row.find(".kilometres").html(),
                        ApplicationID: row.find(".applicationID").data("id"),
                        RoundTrip: row.find(".roundTrip").data("roundTrip"),
                        StatusID: 4,
                        EmployeeID: 1
                    };

                    mileageBatch.push(mileage);
                });

                $.ajax({
                    type: "POST",
                    url: "/Mileages/AddMileages",
                    data: JSON.stringify(mileageBatch),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        alert((response) + " mileage(s) added.");
                        $("#frmCreateMileage").submit();
                        window.location = "/Mileages"
                    }
                });
            
        });
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQoBa1Dcsary4e_iMueoDfG8taMDb8IKI&libraries=places" type="text/javascript"></script>

    @*This script is the actual google api calculatin the distance and cost(with dummy rate) between two locations*@
    <script>

        var source, destination, $chkCustomStartLocation, $chkCustomEndLocation, $chkRoundTrip, roundTrip;
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();

        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 43.002662, lng: -79.2554264 },
            zoom: 15,
            mapTypeId: 'roadmap'
        });

        google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('txtStartAddress'));
            new google.maps.places.SearchBox(document.getElementById('txtEndAddress'));
            directionsDisplay = new google.maps.DirectionsRenderer({ /*'draggable': true*/ });
        });

        $(function () {
            $('.toggle').change(function () {
                var self = $(this);
                var roundTrip = 2;
                var $txtMileage = $("#txtKilometres");
                var txtMileageVal = $txtMileage.val();
                var newMileage;
                var $txtReim = $("#txtReimbursement");
                var txtReimVal = $txtReim.val();
                var newReim;

                if (self.prop('checked')) {
                    newMileage = txtMileageVal * roundTrip;
                    $txtMileage.val(newMileage.toFixed(2));

                    newReim = txtReimVal * roundTrip;
                    $txtReim.val(newReim.toFixed(2));
                }
                else {
                    newMileage = txtMileageVal / roundTrip;
                    $txtMileage.val(newMileage.toFixed(2));

                    newReim = txtReimVal / roundTrip;
                    $txtReim.val(newReim.toFixed(2));
                }
            });
        });

        function GetRoute() {

            directionsDisplay.setMap(map);
            
            $chkRoundTrip = document.getElementById("chkRoundTrip");

            var txtStartSite = document.getElementById("txtStartAddress");
            var ddlStartSite = document.getElementById("ddlStartSite");
            var ddlStartSiteValue = ddlStartSite[ddlStartSite.selectedIndex].value;
            var txtEndSite = document.getElementById("txtEndAddress");
            var ddlEndSite = document.getElementById("ddlEndSite");
            var ddlEndSiteValue = ddlEndSite[ddlEndSite.selectedIndex].value;
            
            if (ddlStartSiteValue != "") {
                txtStartSite.value = ddlStartSiteValue;
            }

            if (ddlEndSiteValue != "") {
                txtEndSite.value = ddlEndSiteValue;
            }

            source = txtStartSite.value;
            destination = txtEndSite.value;

            if ($chkRoundTrip.checked) {
                roundTrip = 2;
            }
            else {
                roundTrip = 1;
            }

            var request = {
                origin: source,
                destination: destination,
                travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                }
            });

            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix({
                origins: [source],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {

                if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.text;
                    var dvDistance = document.getElementById("txtKilometres");
                    var dvCost = document.getElementById("txtReimbursement");
                    var rate = .5;
                    var distance = (response.rows[0].elements[0].distance.value / 1000);
                    var cost = (distance * rate) * roundTrip;
                    var distanceRoundTrip = distance * roundTrip;

                    dvDistance.value = distanceRoundTrip.toFixed(2);
                    dvCost.value = cost.toFixed(2);

                } else {
                    alert("Unable to find the distance via road.");
                }
            });
        }

    </script>
}
