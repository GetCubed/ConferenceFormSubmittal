<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>

@model ConferenceFormSubmittal.Models.Mileage

@{
    ViewBag.Title = "Create";
}


<!--HEADING-->
<div class="row pt-3">
    <div class="col-12">
        <div class="card card-header bg-NCDSB-Grey">
            <h3 class="text-center">Create Mileage</h3>
        </div>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row mt-3">

        <div class="col-3">
            <div class="card card-body bg-NCDSB-Grey">
                <div class="col-12">

                    <input type="submit" value="Create" class="btn btn-primary btn-block mb-3" />

                    @Html.ActionLink("Back to List", "Index", "Mileages", null, new { @class = "btn btn-primary btn-block mb-3" })
                </div>
            </div>
        </div> <!--col-->


        <div class="col-9">
            <div class="row mb-3">
                <div class="col-12">

                    <div class="row">
                        <div class="col-12">
                            <div class="card card-body bg-NCDSB-Grey mt-3">
                                <div class="col-12">
                                    <b class="d-block mt-2">Select Conference</b>

                                    <table class="table">
                                        <tbody>

                                            <tr class="rgba-grey-light">
                                                <td>
                                                    @Html.DropDownListFor(m => Model.ApplicationID, null, "Select An Application To Attach", htmlAttributes: new { @class = "form-control" })
                                                    @*<select name="status" class="d-block">
                                                            <option selected>Connect To Application</option>
                                                            <option>Math Expo @Html.DisplayFor(model => model.ApplicationID, new { htmlAttributes = new { @class = "form-control", @Value = 1 , @text = 1} })</option>
                                                            <option>Code Jam</option>
                                                            <option>Code Jam</option>
                                                        </select>*@
                                                </td>

                                                <td>
                                                    <input type="text" />
                                                </td>
                                                <td>
                                                    <a class="badge badge-primary" href="#">+</a>
                                                </td>
                                            </tr>

                                        </tbody>
                                    </table>

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card card-body bg-NCDSB-Grey">
                        <input type="button" value="Add New Mileage" onclick="AddNewRoute()" />
                        <div class="row">
                            <div class="col-6">
                                <b class="d-block">Date of Travel</b>
                                @*@Html.LabelFor(model => model.TravelDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
                                @Html.EditorFor(model => model.TravelDate, new { htmlAttributes = new { @class = "form-control", @id = "DateOfTravel" } })
                                @Html.ValidationMessageFor(model => model.TravelDate, "", new { @class = "text-danger" })

                                <b class="d-block">Distance</b>
                                @*@Html.LabelFor(model => model.Kilometres, htmlAttributes: new { @class = "control-label col-md-2" })*@
                                @Html.EditorFor(model => model.Kilometres, new { htmlAttributes = new { @class = "form-control", @id = "Distance" } })
                                @Html.ValidationMessageFor(model => model.Kilometres, "", new { @class = "text-danger" })

                                @*NOTE this isnt in the database ATM*@
                                <b class="d-block">Cost</b>
                                <input type="text" id="Cost" />
                                @*@Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control", @id = "Cost" } })
                                @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })*@

                            </div>

                            <div class="col-6">

                                <b class="d-block">Start Address</b>
                                @*@Html.LabelFor(model => model.StartAddress, htmlAttributes: new { @class = "control-label col-md-2" })*@
                                @Html.EditorFor(model => model.StartAddress, new { htmlAttributes = new { @class = "form-control", @id = "StartAddress" } })
                                @Html.ValidationMessageFor(model => model.StartAddress, "", new { @class = "text-danger" })


                                <b class="d-block">End Address</b>
                                @*@Html.LabelFor(model => model.EndAddress, htmlAttributes: new { @class = "control-label col-md-2" })*@
                                @Html.EditorFor(model => model.EndAddress, new { htmlAttributes = new { @class = "form-control", @id = "EndAddress" } })
                                @Html.ValidationMessageFor(model => model.EndAddress, "", new { @class = "text-danger" })

                            </div>

                            @*Temp interface for getting route*@
                            <div class="col-6">
                                <input type="button" value="Get Route" onclick="GetRoute()" />
                            </div>

                            @*This is Temporary Employee choice since I don't know how to get it from login yet or how to hide it yet*@
                            <div class="col-6">

                                <b class="d-block">Employee</b>
                                @Html.EditorFor(model => model.EmployeeID, new { htmlAttributes = new { @class = "form-control", @Value = 1@*, @disabled = true*@}})
                                @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })


                                <b class="d-block">Status</b>
                                @Html.EditorFor(model => model.StatusID, new{ htmlAttributes = new { @class = "form-control", @Value = 2,@*@disabled = true*@}})
                                @Html.ValidationMessageFor(model => model.StatusID, "", new { @class = "text-danger" })

                            </div>

                            @*This is the map interface, Should this only be visable if the user chooses a custom location? *@
                            <div class="col-6" id="dvMap" style="min-height:500px">
                            </div>

                        </div>
                    </div>

                    @*Jason Changed Attpemt at adding a table*@
                    <div class="row">
                        <div class="col-12">
                            <div class="card card-body bg-NCDSB-Grey mt-3">
                                <div class="col-12">
                                    <b class="d-block mt-2">Mileages</b>

                                    <table class="table" id="mileageTable">
                                        <tbody>
                                            <tr>
                                                <th>
                                                    <b>Travel Date</b>
                                                </th>
                                                <th>
                                                    <b>Start Address</b>
                                                </th>
                                                <th>
                                                    <b>End Address</b>
                                                </th>
                                                <th>
                                                    <b>Distance</b>
                                                </th>
                                                <th>
                                                    <b>Cost</b>
                                                </th>
                                                <th></th>
                                            </tr>
                                        </tbody>
                                    </table>

                                </div>
                            </div>
                        </div>
                    </div>

                </div>


            </div> <!--col-->
        </div>
    </div>
}




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @*This is the web api key, at the end after the & is included functions*@
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQoBa1Dcsary4e_iMueoDfG8taMDb8IKI&libraries=places" type="text/javascript"></script>

    @*This script is the actual google api calculatin the distance and cost(with dummy rate) between two locations*@
    <script>

        var source, destination;
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();

        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 43.002662, lng: -79.2554264 },
            zoom: 15,
            mapTypeId: 'roadmap'
        });

        google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('StartAddress'));
            new google.maps.places.SearchBox(document.getElementById('EndAddress'));
            directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
        });

        function GetRoute() {

            directionsDisplay.setMap(map);

            source = document.getElementById("StartAddress").value;
            destination = document.getElementById("EndAddress").value;

            var request = {
                origin: source,
                destination: destination,
                travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                }
            });

            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix({
                origins: [source],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {

                if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.text;
                    //var duration = response.rows[0].elements[0].duration.value;
                    var dvDistance = document.getElementById("Distance");
                    //this will be changed from dvcost to Cost once the database supports it
                    var dvCost = document.getElementById("Cost");
                    //duration = parseFloat(duration / 60).toFixed(2);
                    //This is a dummy rate value for Cost per Km
                    var rate = 5;
                    //Converts the Distance from meters to kilometers
                    var distancecost = response.rows[0].elements[0].distance.value / 1000;
                    var cost = distancecost * rate;

                    //dvDistance.value = distance;//"Distance: " + distance; CURRENTLY COMMITED OUT FOR TRANSFER FORMATING
                    dvDistance.value = distancecost;//CURRENTLY USING THIS SINCE ITS THE RAW NUMBER INSTEAD OF ALREADY FORMATTED
                    dvCost.value = cost//;"Cost: $" + cost; CURRENTLY COMMITED OUT FOR TRANSFER FORMATING
                    //dvDistance.innerHTML += "Time:" + duration + " min";

                } else {
                    alert("Unable to find the distance via road.");
                }
            });
        }

    </script>

    @* This script creates the table at the bottom while also empting the used textboxes *@

    <script>
        var table = document.getElementById("mileageTable");

            function AddNewRoute() {
                var date = document.getElementById("DateOfTravel").value;
                var StartAddress = document.getElementById("StartAddress").value;
                var EndAddress = document.getElementById("EndAddress").value;
                var distance = document.getElementById("Distance").value;
                var cost = document.getElementById("Cost").value;
            
                var row = table.insertRow(1);
            
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                var cell3 = row.insertCell(2);
                var cell4 = row.insertCell(3);
                var cell5 = row.insertCell(4);
            
                cell1.innerHTML = date;
                cell2.innerHTML = StartAddress;
                cell3.innerHTML = EndAddress;
                cell4.innerHTML = distance;
                cell5.innerHTML = cost;
            
                document.getElementById("DateOfTravel").value = "";
                document.getElementById("StartAddress").value = "";
                document.getElementById("EndAddress").value = "";
                document.getElementById("Distance").value = "";
                document.getElementById("Cost").value = "";
            }
            
    </script>

}